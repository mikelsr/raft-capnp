// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Raft capnp.Client

// Raft_TypeID is the unique identifier for the type Raft.
const Raft_TypeID = 0xbfb4702210603dcb

func (c Raft) Join(ctx context.Context, params func(Raft_join_Params) error) (Raft_join_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      0,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_join_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_join_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Leave(ctx context.Context, params func(Raft_leave_Params) error) (Raft_leave_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      1,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "leave",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_leave_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_leave_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Send(ctx context.Context, params func(Raft_send_Params) error) (Raft_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      2,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_send_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Put(ctx context.Context, params func(Raft_put_Params) error) (Raft_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      3,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_put_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Items(ctx context.Context, params func(Raft_items_Params) error) (Raft_items_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      4,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "items",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_items_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_items_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Members(ctx context.Context, params func(Raft_members_Params) error) (Raft_members_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      5,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "members",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_members_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_members_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Id(ctx context.Context, params func(Raft_id_Params) error) (Raft_id_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      6,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "id",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_id_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_id_Results_Future{Future: ans.Future()}, release

}

func (c Raft) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Raft) String() string {
	return "Raft(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Raft) AddRef() Raft {
	return Raft(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Raft) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Raft) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Raft) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Raft) DecodeFromPtr(p capnp.Ptr) Raft {
	return Raft(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Raft) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Raft) IsSame(other Raft) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Raft) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Raft) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Raft_Server is a Raft with a local implementation.
type Raft_Server interface {
	Join(context.Context, Raft_join) error

	Leave(context.Context, Raft_leave) error

	Send(context.Context, Raft_send) error

	Put(context.Context, Raft_put) error

	Items(context.Context, Raft_items) error

	Members(context.Context, Raft_members) error

	Id(context.Context, Raft_id) error
}

// Raft_NewServer creates a new Server from an implementation of Raft_Server.
func Raft_NewServer(s Raft_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Raft_Methods(nil, s), s, c)
}

// Raft_ServerToClient creates a new Client from an implementation of Raft_Server.
// The caller is responsible for calling Release on the returned Client.
func Raft_ServerToClient(s Raft_Server) Raft {
	return Raft(capnp.NewClient(Raft_NewServer(s)))
}

// Raft_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Raft_Methods(methods []server.Method, s Raft_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      0,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, Raft_join{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      1,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "leave",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Leave(ctx, Raft_leave{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      2,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, Raft_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      3,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, Raft_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      4,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "items",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Items(ctx, Raft_items{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      5,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "members",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Members(ctx, Raft_members{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      6,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "id",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Id(ctx, Raft_id{call})
		},
	})

	return methods
}

// Raft_join holds the state for a server call to Raft.join.
// See server.Call for documentation.
type Raft_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_join) Args() Raft_join_Params {
	return Raft_join_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_join) AllocResults() (Raft_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(r), err
}

// Raft_leave holds the state for a server call to Raft.leave.
// See server.Call for documentation.
type Raft_leave struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_leave) Args() Raft_leave_Params {
	return Raft_leave_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_leave) AllocResults() (Raft_leave_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(r), err
}

// Raft_send holds the state for a server call to Raft.send.
// See server.Call for documentation.
type Raft_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_send) Args() Raft_send_Params {
	return Raft_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_send) AllocResults() (Raft_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(r), err
}

// Raft_put holds the state for a server call to Raft.put.
// See server.Call for documentation.
type Raft_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_put) Args() Raft_put_Params {
	return Raft_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_put) AllocResults() (Raft_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(r), err
}

// Raft_items holds the state for a server call to Raft.items.
// See server.Call for documentation.
type Raft_items struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_items) Args() Raft_items_Params {
	return Raft_items_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_items) AllocResults() (Raft_items_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_items_Results(r), err
}

// Raft_members holds the state for a server call to Raft.members.
// See server.Call for documentation.
type Raft_members struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_members) Args() Raft_members_Params {
	return Raft_members_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_members) AllocResults() (Raft_members_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(r), err
}

// Raft_id holds the state for a server call to Raft.id.
// See server.Call for documentation.
type Raft_id struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_id) Args() Raft_id_Params {
	return Raft_id_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_id) AllocResults() (Raft_id_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Raft_id_Results(r), err
}

// Raft_List is a list of Raft.
type Raft_List = capnp.CapList[Raft]

// NewRaft creates a new list of Raft.
func NewRaft_List(s *capnp.Segment, sz int32) (Raft_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Raft](l), err
}

type Raft_join_Params capnp.Struct

// Raft_join_Params_TypeID is the unique identifier for the type Raft_join_Params.
const Raft_join_Params_TypeID = 0xc6f8efbe9e7d5983

func NewRaft_join_Params(s *capnp.Segment) (Raft_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_join_Params(st), err
}

func NewRootRaft_join_Params(s *capnp.Segment) (Raft_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_join_Params(st), err
}

func ReadRootRaft_join_Params(msg *capnp.Message) (Raft_join_Params, error) {
	root, err := msg.Root()
	return Raft_join_Params(root.Struct()), err
}

func (s Raft_join_Params) String() string {
	str, _ := text.Marshal(0xc6f8efbe9e7d5983, capnp.Struct(s))
	return str
}

func (s Raft_join_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_join_Params) DecodeFromPtr(p capnp.Ptr) Raft_join_Params {
	return Raft_join_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_join_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_join_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_join_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_join_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_join_Params) Node() Raft {
	p, _ := capnp.Struct(s).Ptr(0)
	return Raft(p.Interface().Client())
}

func (s Raft_join_Params) HasNode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_join_Params) SetNode(v Raft) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Raft_join_Params_List is a list of Raft_join_Params.
type Raft_join_Params_List = capnp.StructList[Raft_join_Params]

// NewRaft_join_Params creates a new list of Raft_join_Params.
func NewRaft_join_Params_List(s *capnp.Segment, sz int32) (Raft_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_join_Params](l), err
}

// Raft_join_Params_Future is a wrapper for a Raft_join_Params promised by a client call.
type Raft_join_Params_Future struct{ *capnp.Future }

func (f Raft_join_Params_Future) Struct() (Raft_join_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_join_Params(p.Struct()), err
}
func (p Raft_join_Params_Future) Node() Raft {
	return Raft(p.Future.Field(0, nil).Client())
}

type Raft_join_Results capnp.Struct

// Raft_join_Results_TypeID is the unique identifier for the type Raft_join_Results.
const Raft_join_Results_TypeID = 0xb009687519b3f38f

func NewRaft_join_Results(s *capnp.Segment) (Raft_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(st), err
}

func NewRootRaft_join_Results(s *capnp.Segment) (Raft_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(st), err
}

func ReadRootRaft_join_Results(msg *capnp.Message) (Raft_join_Results, error) {
	root, err := msg.Root()
	return Raft_join_Results(root.Struct()), err
}

func (s Raft_join_Results) String() string {
	str, _ := text.Marshal(0xb009687519b3f38f, capnp.Struct(s))
	return str
}

func (s Raft_join_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_join_Results) DecodeFromPtr(p capnp.Ptr) Raft_join_Results {
	return Raft_join_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_join_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_join_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_join_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_join_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_join_Results) Nodes() (Raft_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Raft_List(p.List()), err
}

func (s Raft_join_Results) HasNodes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_join_Results) SetNodes(v Raft_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewNodes sets the nodes field to a newly
// allocated Raft_List, preferring placement in s's segment.
func (s Raft_join_Results) NewNodes(n int32) (Raft_List, error) {
	l, err := NewRaft_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Raft_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Raft_join_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Raft_join_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Raft_join_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Raft_join_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Raft_join_Results_List is a list of Raft_join_Results.
type Raft_join_Results_List = capnp.StructList[Raft_join_Results]

// NewRaft_join_Results creates a new list of Raft_join_Results.
func NewRaft_join_Results_List(s *capnp.Segment, sz int32) (Raft_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Raft_join_Results](l), err
}

// Raft_join_Results_Future is a wrapper for a Raft_join_Results promised by a client call.
type Raft_join_Results_Future struct{ *capnp.Future }

func (f Raft_join_Results_Future) Struct() (Raft_join_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_join_Results(p.Struct()), err
}

type Raft_leave_Params capnp.Struct

// Raft_leave_Params_TypeID is the unique identifier for the type Raft_leave_Params.
const Raft_leave_Params_TypeID = 0xf9ef9a25541688ef

func NewRaft_leave_Params(s *capnp.Segment) (Raft_leave_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Params(st), err
}

func NewRootRaft_leave_Params(s *capnp.Segment) (Raft_leave_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Params(st), err
}

func ReadRootRaft_leave_Params(msg *capnp.Message) (Raft_leave_Params, error) {
	root, err := msg.Root()
	return Raft_leave_Params(root.Struct()), err
}

func (s Raft_leave_Params) String() string {
	str, _ := text.Marshal(0xf9ef9a25541688ef, capnp.Struct(s))
	return str
}

func (s Raft_leave_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_leave_Params) DecodeFromPtr(p capnp.Ptr) Raft_leave_Params {
	return Raft_leave_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_leave_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_leave_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_leave_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_leave_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_leave_Params) Node() Raft {
	p, _ := capnp.Struct(s).Ptr(0)
	return Raft(p.Interface().Client())
}

func (s Raft_leave_Params) HasNode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_leave_Params) SetNode(v Raft) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Raft_leave_Params_List is a list of Raft_leave_Params.
type Raft_leave_Params_List = capnp.StructList[Raft_leave_Params]

// NewRaft_leave_Params creates a new list of Raft_leave_Params.
func NewRaft_leave_Params_List(s *capnp.Segment, sz int32) (Raft_leave_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_leave_Params](l), err
}

// Raft_leave_Params_Future is a wrapper for a Raft_leave_Params promised by a client call.
type Raft_leave_Params_Future struct{ *capnp.Future }

func (f Raft_leave_Params_Future) Struct() (Raft_leave_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_leave_Params(p.Struct()), err
}
func (p Raft_leave_Params_Future) Node() Raft {
	return Raft(p.Future.Field(0, nil).Client())
}

type Raft_leave_Results capnp.Struct

// Raft_leave_Results_TypeID is the unique identifier for the type Raft_leave_Results.
const Raft_leave_Results_TypeID = 0xf139b86f408c2bb0

func NewRaft_leave_Results(s *capnp.Segment) (Raft_leave_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(st), err
}

func NewRootRaft_leave_Results(s *capnp.Segment) (Raft_leave_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(st), err
}

func ReadRootRaft_leave_Results(msg *capnp.Message) (Raft_leave_Results, error) {
	root, err := msg.Root()
	return Raft_leave_Results(root.Struct()), err
}

func (s Raft_leave_Results) String() string {
	str, _ := text.Marshal(0xf139b86f408c2bb0, capnp.Struct(s))
	return str
}

func (s Raft_leave_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_leave_Results) DecodeFromPtr(p capnp.Ptr) Raft_leave_Results {
	return Raft_leave_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_leave_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_leave_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_leave_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_leave_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_leave_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_leave_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_leave_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_leave_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_leave_Results_List is a list of Raft_leave_Results.
type Raft_leave_Results_List = capnp.StructList[Raft_leave_Results]

// NewRaft_leave_Results creates a new list of Raft_leave_Results.
func NewRaft_leave_Results_List(s *capnp.Segment, sz int32) (Raft_leave_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_leave_Results](l), err
}

// Raft_leave_Results_Future is a wrapper for a Raft_leave_Results promised by a client call.
type Raft_leave_Results_Future struct{ *capnp.Future }

func (f Raft_leave_Results_Future) Struct() (Raft_leave_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_leave_Results(p.Struct()), err
}

type Raft_send_Params capnp.Struct

// Raft_send_Params_TypeID is the unique identifier for the type Raft_send_Params.
const Raft_send_Params_TypeID = 0xb1f8c610d8dbb7dd

func NewRaft_send_Params(s *capnp.Segment) (Raft_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Params(st), err
}

func NewRootRaft_send_Params(s *capnp.Segment) (Raft_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Params(st), err
}

func ReadRootRaft_send_Params(msg *capnp.Message) (Raft_send_Params, error) {
	root, err := msg.Root()
	return Raft_send_Params(root.Struct()), err
}

func (s Raft_send_Params) String() string {
	str, _ := text.Marshal(0xb1f8c610d8dbb7dd, capnp.Struct(s))
	return str
}

func (s Raft_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_send_Params) DecodeFromPtr(p capnp.Ptr) Raft_send_Params {
	return Raft_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_send_Params) Msg() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Raft_send_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_send_Params) SetMsg(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Raft_send_Params_List is a list of Raft_send_Params.
type Raft_send_Params_List = capnp.StructList[Raft_send_Params]

// NewRaft_send_Params creates a new list of Raft_send_Params.
func NewRaft_send_Params_List(s *capnp.Segment, sz int32) (Raft_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_send_Params](l), err
}

// Raft_send_Params_Future is a wrapper for a Raft_send_Params promised by a client call.
type Raft_send_Params_Future struct{ *capnp.Future }

func (f Raft_send_Params_Future) Struct() (Raft_send_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_send_Params(p.Struct()), err
}

type Raft_send_Results capnp.Struct

// Raft_send_Results_TypeID is the unique identifier for the type Raft_send_Results.
const Raft_send_Results_TypeID = 0xf26fa267f7ea2066

func NewRaft_send_Results(s *capnp.Segment) (Raft_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(st), err
}

func NewRootRaft_send_Results(s *capnp.Segment) (Raft_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(st), err
}

func ReadRootRaft_send_Results(msg *capnp.Message) (Raft_send_Results, error) {
	root, err := msg.Root()
	return Raft_send_Results(root.Struct()), err
}

func (s Raft_send_Results) String() string {
	str, _ := text.Marshal(0xf26fa267f7ea2066, capnp.Struct(s))
	return str
}

func (s Raft_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_send_Results) DecodeFromPtr(p capnp.Ptr) Raft_send_Results {
	return Raft_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_send_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_send_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_send_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_send_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_send_Results_List is a list of Raft_send_Results.
type Raft_send_Results_List = capnp.StructList[Raft_send_Results]

// NewRaft_send_Results creates a new list of Raft_send_Results.
func NewRaft_send_Results_List(s *capnp.Segment, sz int32) (Raft_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_send_Results](l), err
}

// Raft_send_Results_Future is a wrapper for a Raft_send_Results promised by a client call.
type Raft_send_Results_Future struct{ *capnp.Future }

func (f Raft_send_Results_Future) Struct() (Raft_send_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_send_Results(p.Struct()), err
}

type Raft_put_Params capnp.Struct

// Raft_put_Params_TypeID is the unique identifier for the type Raft_put_Params.
const Raft_put_Params_TypeID = 0xd063789821634bd8

func NewRaft_put_Params(s *capnp.Segment) (Raft_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Params(st), err
}

func NewRootRaft_put_Params(s *capnp.Segment) (Raft_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Params(st), err
}

func ReadRootRaft_put_Params(msg *capnp.Message) (Raft_put_Params, error) {
	root, err := msg.Root()
	return Raft_put_Params(root.Struct()), err
}

func (s Raft_put_Params) String() string {
	str, _ := text.Marshal(0xd063789821634bd8, capnp.Struct(s))
	return str
}

func (s Raft_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_put_Params) DecodeFromPtr(p capnp.Ptr) Raft_put_Params {
	return Raft_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_put_Params) Item() (Item, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Item(p.Struct()), err
}

func (s Raft_put_Params) HasItem() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_put_Params) SetItem(v Item) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewItem sets the item field to a newly
// allocated Item struct, preferring placement in s's segment.
func (s Raft_put_Params) NewItem() (Item, error) {
	ss, err := NewItem(capnp.Struct(s).Segment())
	if err != nil {
		return Item{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Raft_put_Params_List is a list of Raft_put_Params.
type Raft_put_Params_List = capnp.StructList[Raft_put_Params]

// NewRaft_put_Params creates a new list of Raft_put_Params.
func NewRaft_put_Params_List(s *capnp.Segment, sz int32) (Raft_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_put_Params](l), err
}

// Raft_put_Params_Future is a wrapper for a Raft_put_Params promised by a client call.
type Raft_put_Params_Future struct{ *capnp.Future }

func (f Raft_put_Params_Future) Struct() (Raft_put_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_put_Params(p.Struct()), err
}
func (p Raft_put_Params_Future) Item() Item_Future {
	return Item_Future{Future: p.Future.Field(0, nil)}
}

type Raft_put_Results capnp.Struct

// Raft_put_Results_TypeID is the unique identifier for the type Raft_put_Results.
const Raft_put_Results_TypeID = 0x9c4beb6b068077a3

func NewRaft_put_Results(s *capnp.Segment) (Raft_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(st), err
}

func NewRootRaft_put_Results(s *capnp.Segment) (Raft_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(st), err
}

func ReadRootRaft_put_Results(msg *capnp.Message) (Raft_put_Results, error) {
	root, err := msg.Root()
	return Raft_put_Results(root.Struct()), err
}

func (s Raft_put_Results) String() string {
	str, _ := text.Marshal(0x9c4beb6b068077a3, capnp.Struct(s))
	return str
}

func (s Raft_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_put_Results) DecodeFromPtr(p capnp.Ptr) Raft_put_Results {
	return Raft_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_put_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_put_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_put_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_put_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_put_Results_List is a list of Raft_put_Results.
type Raft_put_Results_List = capnp.StructList[Raft_put_Results]

// NewRaft_put_Results creates a new list of Raft_put_Results.
func NewRaft_put_Results_List(s *capnp.Segment, sz int32) (Raft_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_put_Results](l), err
}

// Raft_put_Results_Future is a wrapper for a Raft_put_Results promised by a client call.
type Raft_put_Results_Future struct{ *capnp.Future }

func (f Raft_put_Results_Future) Struct() (Raft_put_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_put_Results(p.Struct()), err
}

type Raft_items_Params capnp.Struct

// Raft_items_Params_TypeID is the unique identifier for the type Raft_items_Params.
const Raft_items_Params_TypeID = 0xf16297be3b2d1ee4

func NewRaft_items_Params(s *capnp.Segment) (Raft_items_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_items_Params(st), err
}

func NewRootRaft_items_Params(s *capnp.Segment) (Raft_items_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_items_Params(st), err
}

func ReadRootRaft_items_Params(msg *capnp.Message) (Raft_items_Params, error) {
	root, err := msg.Root()
	return Raft_items_Params(root.Struct()), err
}

func (s Raft_items_Params) String() string {
	str, _ := text.Marshal(0xf16297be3b2d1ee4, capnp.Struct(s))
	return str
}

func (s Raft_items_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_items_Params) DecodeFromPtr(p capnp.Ptr) Raft_items_Params {
	return Raft_items_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_items_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_items_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_items_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_items_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_items_Params_List is a list of Raft_items_Params.
type Raft_items_Params_List = capnp.StructList[Raft_items_Params]

// NewRaft_items_Params creates a new list of Raft_items_Params.
func NewRaft_items_Params_List(s *capnp.Segment, sz int32) (Raft_items_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_items_Params](l), err
}

// Raft_items_Params_Future is a wrapper for a Raft_items_Params promised by a client call.
type Raft_items_Params_Future struct{ *capnp.Future }

func (f Raft_items_Params_Future) Struct() (Raft_items_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_items_Params(p.Struct()), err
}

type Raft_items_Results capnp.Struct

// Raft_items_Results_TypeID is the unique identifier for the type Raft_items_Results.
const Raft_items_Results_TypeID = 0xeb05cc390961a49a

func NewRaft_items_Results(s *capnp.Segment) (Raft_items_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_items_Results(st), err
}

func NewRootRaft_items_Results(s *capnp.Segment) (Raft_items_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_items_Results(st), err
}

func ReadRootRaft_items_Results(msg *capnp.Message) (Raft_items_Results, error) {
	root, err := msg.Root()
	return Raft_items_Results(root.Struct()), err
}

func (s Raft_items_Results) String() string {
	str, _ := text.Marshal(0xeb05cc390961a49a, capnp.Struct(s))
	return str
}

func (s Raft_items_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_items_Results) DecodeFromPtr(p capnp.Ptr) Raft_items_Results {
	return Raft_items_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_items_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_items_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_items_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_items_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_items_Results) Objects() (Item_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Item_List(p.List()), err
}

func (s Raft_items_Results) HasObjects() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_items_Results) SetObjects(v Item_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewObjects sets the objects field to a newly
// allocated Item_List, preferring placement in s's segment.
func (s Raft_items_Results) NewObjects(n int32) (Item_List, error) {
	l, err := NewItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Item_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Raft_items_Results_List is a list of Raft_items_Results.
type Raft_items_Results_List = capnp.StructList[Raft_items_Results]

// NewRaft_items_Results creates a new list of Raft_items_Results.
func NewRaft_items_Results_List(s *capnp.Segment, sz int32) (Raft_items_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_items_Results](l), err
}

// Raft_items_Results_Future is a wrapper for a Raft_items_Results promised by a client call.
type Raft_items_Results_Future struct{ *capnp.Future }

func (f Raft_items_Results_Future) Struct() (Raft_items_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_items_Results(p.Struct()), err
}

type Raft_members_Params capnp.Struct

// Raft_members_Params_TypeID is the unique identifier for the type Raft_members_Params.
const Raft_members_Params_TypeID = 0xf561891b2176587a

func NewRaft_members_Params(s *capnp.Segment) (Raft_members_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_members_Params(st), err
}

func NewRootRaft_members_Params(s *capnp.Segment) (Raft_members_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_members_Params(st), err
}

func ReadRootRaft_members_Params(msg *capnp.Message) (Raft_members_Params, error) {
	root, err := msg.Root()
	return Raft_members_Params(root.Struct()), err
}

func (s Raft_members_Params) String() string {
	str, _ := text.Marshal(0xf561891b2176587a, capnp.Struct(s))
	return str
}

func (s Raft_members_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_members_Params) DecodeFromPtr(p capnp.Ptr) Raft_members_Params {
	return Raft_members_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_members_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_members_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_members_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_members_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_members_Params_List is a list of Raft_members_Params.
type Raft_members_Params_List = capnp.StructList[Raft_members_Params]

// NewRaft_members_Params creates a new list of Raft_members_Params.
func NewRaft_members_Params_List(s *capnp.Segment, sz int32) (Raft_members_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_members_Params](l), err
}

// Raft_members_Params_Future is a wrapper for a Raft_members_Params promised by a client call.
type Raft_members_Params_Future struct{ *capnp.Future }

func (f Raft_members_Params_Future) Struct() (Raft_members_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_members_Params(p.Struct()), err
}

type Raft_members_Results capnp.Struct

// Raft_members_Results_TypeID is the unique identifier for the type Raft_members_Results.
const Raft_members_Results_TypeID = 0xbd2f697b2c16b9a9

func NewRaft_members_Results(s *capnp.Segment) (Raft_members_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(st), err
}

func NewRootRaft_members_Results(s *capnp.Segment) (Raft_members_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(st), err
}

func ReadRootRaft_members_Results(msg *capnp.Message) (Raft_members_Results, error) {
	root, err := msg.Root()
	return Raft_members_Results(root.Struct()), err
}

func (s Raft_members_Results) String() string {
	str, _ := text.Marshal(0xbd2f697b2c16b9a9, capnp.Struct(s))
	return str
}

func (s Raft_members_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_members_Results) DecodeFromPtr(p capnp.Ptr) Raft_members_Results {
	return Raft_members_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_members_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_members_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_members_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_members_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_members_Results) Members() (Raft_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Raft_List(p.List()), err
}

func (s Raft_members_Results) HasMembers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_members_Results) SetMembers(v Raft_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMembers sets the members field to a newly
// allocated Raft_List, preferring placement in s's segment.
func (s Raft_members_Results) NewMembers(n int32) (Raft_List, error) {
	l, err := NewRaft_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Raft_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Raft_members_Results_List is a list of Raft_members_Results.
type Raft_members_Results_List = capnp.StructList[Raft_members_Results]

// NewRaft_members_Results creates a new list of Raft_members_Results.
func NewRaft_members_Results_List(s *capnp.Segment, sz int32) (Raft_members_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_members_Results](l), err
}

// Raft_members_Results_Future is a wrapper for a Raft_members_Results promised by a client call.
type Raft_members_Results_Future struct{ *capnp.Future }

func (f Raft_members_Results_Future) Struct() (Raft_members_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_members_Results(p.Struct()), err
}

type Raft_id_Params capnp.Struct

// Raft_id_Params_TypeID is the unique identifier for the type Raft_id_Params.
const Raft_id_Params_TypeID = 0xa8563660e0af9da4

func NewRaft_id_Params(s *capnp.Segment) (Raft_id_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_id_Params(st), err
}

func NewRootRaft_id_Params(s *capnp.Segment) (Raft_id_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_id_Params(st), err
}

func ReadRootRaft_id_Params(msg *capnp.Message) (Raft_id_Params, error) {
	root, err := msg.Root()
	return Raft_id_Params(root.Struct()), err
}

func (s Raft_id_Params) String() string {
	str, _ := text.Marshal(0xa8563660e0af9da4, capnp.Struct(s))
	return str
}

func (s Raft_id_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_id_Params) DecodeFromPtr(p capnp.Ptr) Raft_id_Params {
	return Raft_id_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_id_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_id_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_id_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_id_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_id_Params_List is a list of Raft_id_Params.
type Raft_id_Params_List = capnp.StructList[Raft_id_Params]

// NewRaft_id_Params creates a new list of Raft_id_Params.
func NewRaft_id_Params_List(s *capnp.Segment, sz int32) (Raft_id_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_id_Params](l), err
}

// Raft_id_Params_Future is a wrapper for a Raft_id_Params promised by a client call.
type Raft_id_Params_Future struct{ *capnp.Future }

func (f Raft_id_Params_Future) Struct() (Raft_id_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_id_Params(p.Struct()), err
}

type Raft_id_Results capnp.Struct

// Raft_id_Results_TypeID is the unique identifier for the type Raft_id_Results.
const Raft_id_Results_TypeID = 0xc07b385c303c1f57

func NewRaft_id_Results(s *capnp.Segment) (Raft_id_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Raft_id_Results(st), err
}

func NewRootRaft_id_Results(s *capnp.Segment) (Raft_id_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Raft_id_Results(st), err
}

func ReadRootRaft_id_Results(msg *capnp.Message) (Raft_id_Results, error) {
	root, err := msg.Root()
	return Raft_id_Results(root.Struct()), err
}

func (s Raft_id_Results) String() string {
	str, _ := text.Marshal(0xc07b385c303c1f57, capnp.Struct(s))
	return str
}

func (s Raft_id_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_id_Results) DecodeFromPtr(p capnp.Ptr) Raft_id_Results {
	return Raft_id_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_id_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_id_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_id_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_id_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_id_Results) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Raft_id_Results) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Raft_id_Results_List is a list of Raft_id_Results.
type Raft_id_Results_List = capnp.StructList[Raft_id_Results]

// NewRaft_id_Results creates a new list of Raft_id_Results.
func NewRaft_id_Results_List(s *capnp.Segment, sz int32) (Raft_id_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Raft_id_Results](l), err
}

// Raft_id_Results_Future is a wrapper for a Raft_id_Results promised by a client call.
type Raft_id_Results_Future struct{ *capnp.Future }

func (f Raft_id_Results_Future) Struct() (Raft_id_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_id_Results(p.Struct()), err
}

type Item capnp.Struct

// Item_TypeID is the unique identifier for the type Item.
const Item_TypeID = 0xae462da6618b7135

func NewItem(s *capnp.Segment) (Item, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Item(st), err
}

func NewRootItem(s *capnp.Segment) (Item, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Item(st), err
}

func ReadRootItem(msg *capnp.Message) (Item, error) {
	root, err := msg.Root()
	return Item(root.Struct()), err
}

func (s Item) String() string {
	str, _ := text.Marshal(0xae462da6618b7135, capnp.Struct(s))
	return str
}

func (s Item) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Item) DecodeFromPtr(p capnp.Ptr) Item {
	return Item(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Item) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Item) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Item) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Item) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Item) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Item) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Item) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Item) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Item) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Item) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// Item_List is a list of Item.
type Item_List = capnp.StructList[Item]

// NewItem creates a new list of Item.
func NewItem_List(s *capnp.Segment, sz int32) (Item_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Item](l), err
}

// Item_Future is a wrapper for a Item promised by a client call.
type Item_Future struct{ *capnp.Future }

func (f Item_Future) Struct() (Item, error) {
	p, err := f.Future.Ptr()
	return Item(p.Struct()), err
}

const schema_8dcfa60b52844164 = "x\xda\x9cT_\x88TU\x1c\xfe}\xe7\xdc?.\xeb" +
	":s\xb8\"d\xd1\xe42BZS\xbbk\x1b\xae%" +
	"{\x95\x08D\x82\xb9C\xff\x16\x0a\xbc\xbbs\xb4\xd1\x9d" +
	"?\xce\x9dY+Y\x0ak\xa1\xa1\xa2\xa7($\x83J" +
	"$\x1f,\xa3\xa0|\xd0\xea!{\xa8({\x92\"\x88" +
	"\x08\x82\xf5aYC\xb2^n\x9c\xe3\xdc;w\xda\x19" +
	"B\xdff\xeew~\xdf\xef;\xdf\xef\xfb\x9d\x91\x02s" +
	"\x8d\xd1\xa1?,b^\xde\xb4\xc2\xf7\x0e=o\x1d\xb8" +
	"\xb4\xfb-\x12i\x10\x99\xb0\x89\x9c)\xfe\x1b\xc1y\x92" +
	"O\x12\xc2\xe3\xc7>\xfcu\xcf\xbd\x8f\xbe\x7f\x0d7\x14" +
	"<\xcf\x7f$#\x1c?\xf8\xb2\x7f\"\xf7\xe0\x07$\x06" +
	"\x11\x16w\xbcX\x18<\xf1\xfd\xabd2u\xc2\xe7G" +
	"\x1c\xc9\xaf\xfd:D\x08_\xfb\xf3\xe3\x9b\x9aO\x0d\x9c" +
	"n7\xd1g\xce\xf2E\x82\xf3\xa5\xc6\x7f\xf9\xf4\xe7\x8b" +
	"\xe9\xf3W?J\x8a\xc8\x19J\xc4\xa8\xa1D\x9c<\xb3" +
	"\xee\xce\xc3\xa5\xbb\xcf&\xf0-\x9e\xc1@p\x1e\xd1\x07" +
	"\xbe\xd9\xbe'=\\\xfb\xe4s\x12\x83\xbc#\x86\xe0," +
	"\x18G\x9c\x96R\xbde\xc1\xf8\x1a\xce1\xd3&\x0a\x1f" +
	"\xcb\xdc?\xf2\xc4\xd6\xc3_\x90\x97Ft\xa9\x05\xf3'" +
	"\x82\xd32\x15\xdb\x0bS\xf3o\x9f[\xbaz>)\xe7" +
	"\xa4\xa9\xe4\x9c\xd2\xf8\xc5\xdd3\x1b\xde|z\xe6\x87$" +
	"\xfe\x9d\xae\xbf\xa0\xf1\xa3\xc7\xfd\x81\x89o\xcdKI|" +
	"\xd9\xbcLp\xaeh\xfc\xf4\x1d\xaf\xb8\xd5\xcf&\x96\x93" +
	"\xf8FK\xe1\x9b,\x85\xff~k\xee\xbesoL/" +
	"'<\xdfe-\x92\x11\xee\xbdm\xf1\xaf}\xefV/" +
	"w\xf9d)\x1fGu\xe1\xb3\x8f\xcfm\xb8\xb9\xe5_" +
	"I\x14z\xd6?d\x84K/\xad{x\xe3\xd1\xa5\xbf" +
	"\x93\x85\xe3\xbap\xc2\x9a\xa4\\X\xf7\xf76\xee\x9a\xf1" +
	"k\xacR\xdbVP\xbfk\xcdF\xb6 \x83\xa6=\xdb" +
	"\x08<\x83\x1bD\x06\x88\xc4\xd0\x18\x91\xb7\x8a\xc3[\xcb" +
	"\x90\x91\xf5z\xb5\x8e\xd5\xc4\xb0\x9a\xb0\x92\xa2T\xcc\xe6" +
	"\xfd\xba_F\x10c\xa8\xd4\xb6\xedj\xc82\xe5\x01o" +
	"U\xcc\xbai\x98\xc8\xcbrx#\x0c\x02X\xab\x86\"" +
	"r\xaa\xd5\xed\x1c\xde=\x0c\xf6\x01\xf9\x0c\x86\x88a\x88" +
	"\x90\x99\xf3g\x9b2\xfa\xb7\xb2\xed\xfej\xa9\xa2\xa4\xa7" +
	"\x9aJz\xa2\xc9X\xbb\x89\x9bh\xb2]}\xdc\xca\xe1" +
	"=\xc0\x90\xa9T\x8b2\xc0\x1aB\x9e\x03\xa2\x93)\x82" +
	"\xfa\xf8\x7f\xd7\x0ddE_\xd8\xf6\xcb]\x8e\x0dw\x1c" +
	"\xb3\xcb\xc1\xbe\x15\xc2yDP\x96\xe5iY\x0f\xb4\xed" +
	"\xb3\x8d\x80\x92$;\xdb$Y\x86\xe7\xda\xe7\xfa\x0a\xed" +
	"r[1k\xb7o\xe1&Q\x9clD\x1b).l" +
	"&&\xbe\xb2\x818#\x88\xe2)\xce\x8c\x11\x13\xa7l" +
	"\xb0xA\x11%P\xbc\xa3\xea^\xb7\xc1\xe3m@\xf4" +
	"\x94\x88\xd6011o\xc3\x88\x93\x8ch%\xc4A\xc5" +
	")m\x98qX\x11m\xb7\x98\xdaIL<d\xc3\x8a" +
	"_\x1dD\xab*v\xac'&\xc6\xed\x94\x1a\xaf\x8b\xcc" +
	"\xac\xf4\xe7\xa4\x8b\x94r\xdd\x85]k6\\dJ\x0d" +
	"Y\x0e\xdc\xd8!\x17\xbcTt\x91G\xefpj\x9fy" +
	"w\xbc\xd7w\x86\xc5KE\x0c\x10\xc3@\xdf\x90\xf5\x18" +
	"\xf6\xe6N}J\xc5\xe9?\xd3\x11\xbd\xb8\xd4\xaa\xa9E" +
	"\xe1\xfd\xa9\xd4\xc5\x90\xee<\xb9\x04\xa4{\xae\x9c2 " +
	"[\x90\x19\x9d\xa0~\x01\xaaN\xef\x973\x8d8@\xdd" +
	"\xbckz\xf1j\xb7{\xf2^\xcf{\xa0\xc5\xe5\xfdT" +
	"\xdd/\x07}\xf6'\xde\xdb\x1bk\x11\xad\xd0\xa4~x" +
	"\x82~\x17ik\xb8\xbe\xc1\xfd\x1b\x00\x00\xff\xffr\x9a" +
	"\xdc\xf6"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8dcfa60b52844164,
		Nodes: []uint64{
			0x9c4beb6b068077a3,
			0xa8563660e0af9da4,
			0xae462da6618b7135,
			0xb009687519b3f38f,
			0xb1f8c610d8dbb7dd,
			0xbd2f697b2c16b9a9,
			0xbfb4702210603dcb,
			0xc07b385c303c1f57,
			0xc6f8efbe9e7d5983,
			0xd063789821634bd8,
			0xeb05cc390961a49a,
			0xf139b86f408c2bb0,
			0xf16297be3b2d1ee4,
			0xf26fa267f7ea2066,
			0xf561891b2176587a,
			0xf9ef9a25541688ef,
		},
		Compressed: true,
	})
}
