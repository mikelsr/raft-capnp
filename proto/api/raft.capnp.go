// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Raft capnp.Client

// Raft_TypeID is the unique identifier for the type Raft.
const Raft_TypeID = 0xbfb4702210603dcb

func (c Raft) Join(ctx context.Context, params func(Raft_join_Params) error) (Raft_join_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      0,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_join_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_join_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Leave(ctx context.Context, params func(Raft_leave_Params) error) (Raft_leave_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      1,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "leave",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_leave_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_leave_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Send(ctx context.Context, params func(Raft_send_Params) error) (Raft_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      2,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_send_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Put(ctx context.Context, params func(Raft_put_Params) error) (Raft_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      3,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_put_Results_Future{Future: ans.Future()}, release

}

func (c Raft) List(ctx context.Context, params func(Raft_list_Params) error) (Raft_list_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      4,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "list",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_list_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_list_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Members(ctx context.Context, params func(Raft_members_Params) error) (Raft_members_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      5,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "members",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_members_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_members_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Id(ctx context.Context, params func(Raft_id_Params) error) (Raft_id_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      6,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "id",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_id_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_id_Results_Future{Future: ans.Future()}, release

}

func (c Raft) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Raft) String() string {
	return "Raft(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Raft) AddRef() Raft {
	return Raft(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Raft) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Raft) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Raft) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Raft) DecodeFromPtr(p capnp.Ptr) Raft {
	return Raft(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Raft) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Raft) IsSame(other Raft) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Raft) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Raft) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Raft_Server is a Raft with a local implementation.
type Raft_Server interface {
	Join(context.Context, Raft_join) error

	Leave(context.Context, Raft_leave) error

	Send(context.Context, Raft_send) error

	Put(context.Context, Raft_put) error

	List(context.Context, Raft_list) error

	Members(context.Context, Raft_members) error

	Id(context.Context, Raft_id) error
}

// Raft_NewServer creates a new Server from an implementation of Raft_Server.
func Raft_NewServer(s Raft_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Raft_Methods(nil, s), s, c)
}

// Raft_ServerToClient creates a new Client from an implementation of Raft_Server.
// The caller is responsible for calling Release on the returned Client.
func Raft_ServerToClient(s Raft_Server) Raft {
	return Raft(capnp.NewClient(Raft_NewServer(s)))
}

// Raft_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Raft_Methods(methods []server.Method, s Raft_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      0,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, Raft_join{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      1,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "leave",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Leave(ctx, Raft_leave{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      2,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, Raft_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      3,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, Raft_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      4,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "list",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.List(ctx, Raft_list{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      5,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "members",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Members(ctx, Raft_members{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      6,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "id",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Id(ctx, Raft_id{call})
		},
	})

	return methods
}

// Raft_join holds the state for a server call to Raft.join.
// See server.Call for documentation.
type Raft_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_join) Args() Raft_join_Params {
	return Raft_join_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_join) AllocResults() (Raft_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(r), err
}

// Raft_leave holds the state for a server call to Raft.leave.
// See server.Call for documentation.
type Raft_leave struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_leave) Args() Raft_leave_Params {
	return Raft_leave_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_leave) AllocResults() (Raft_leave_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(r), err
}

// Raft_send holds the state for a server call to Raft.send.
// See server.Call for documentation.
type Raft_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_send) Args() Raft_send_Params {
	return Raft_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_send) AllocResults() (Raft_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(r), err
}

// Raft_put holds the state for a server call to Raft.put.
// See server.Call for documentation.
type Raft_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_put) Args() Raft_put_Params {
	return Raft_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_put) AllocResults() (Raft_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(r), err
}

// Raft_list holds the state for a server call to Raft.list.
// See server.Call for documentation.
type Raft_list struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_list) Args() Raft_list_Params {
	return Raft_list_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_list) AllocResults() (Raft_list_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_list_Results(r), err
}

// Raft_members holds the state for a server call to Raft.members.
// See server.Call for documentation.
type Raft_members struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_members) Args() Raft_members_Params {
	return Raft_members_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_members) AllocResults() (Raft_members_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(r), err
}

// Raft_id holds the state for a server call to Raft.id.
// See server.Call for documentation.
type Raft_id struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_id) Args() Raft_id_Params {
	return Raft_id_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_id) AllocResults() (Raft_id_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Raft_id_Results(r), err
}

// Raft_List is a list of Raft.
type Raft_List = capnp.CapList[Raft]

// NewRaft creates a new list of Raft.
func NewRaft_List(s *capnp.Segment, sz int32) (Raft_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Raft](l), err
}

type Raft_join_Params capnp.Struct

// Raft_join_Params_TypeID is the unique identifier for the type Raft_join_Params.
const Raft_join_Params_TypeID = 0xc6f8efbe9e7d5983

func NewRaft_join_Params(s *capnp.Segment) (Raft_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_join_Params(st), err
}

func NewRootRaft_join_Params(s *capnp.Segment) (Raft_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_join_Params(st), err
}

func ReadRootRaft_join_Params(msg *capnp.Message) (Raft_join_Params, error) {
	root, err := msg.Root()
	return Raft_join_Params(root.Struct()), err
}

func (s Raft_join_Params) String() string {
	str, _ := text.Marshal(0xc6f8efbe9e7d5983, capnp.Struct(s))
	return str
}

func (s Raft_join_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_join_Params) DecodeFromPtr(p capnp.Ptr) Raft_join_Params {
	return Raft_join_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_join_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_join_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_join_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_join_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_join_Params) Node() Raft {
	p, _ := capnp.Struct(s).Ptr(0)
	return Raft(p.Interface().Client())
}

func (s Raft_join_Params) HasNode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_join_Params) SetNode(v Raft) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Raft_join_Params_List is a list of Raft_join_Params.
type Raft_join_Params_List = capnp.StructList[Raft_join_Params]

// NewRaft_join_Params creates a new list of Raft_join_Params.
func NewRaft_join_Params_List(s *capnp.Segment, sz int32) (Raft_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_join_Params](l), err
}

// Raft_join_Params_Future is a wrapper for a Raft_join_Params promised by a client call.
type Raft_join_Params_Future struct{ *capnp.Future }

func (f Raft_join_Params_Future) Struct() (Raft_join_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_join_Params(p.Struct()), err
}
func (p Raft_join_Params_Future) Node() Raft {
	return Raft(p.Future.Field(0, nil).Client())
}

type Raft_join_Results capnp.Struct

// Raft_join_Results_TypeID is the unique identifier for the type Raft_join_Results.
const Raft_join_Results_TypeID = 0xb009687519b3f38f

func NewRaft_join_Results(s *capnp.Segment) (Raft_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(st), err
}

func NewRootRaft_join_Results(s *capnp.Segment) (Raft_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(st), err
}

func ReadRootRaft_join_Results(msg *capnp.Message) (Raft_join_Results, error) {
	root, err := msg.Root()
	return Raft_join_Results(root.Struct()), err
}

func (s Raft_join_Results) String() string {
	str, _ := text.Marshal(0xb009687519b3f38f, capnp.Struct(s))
	return str
}

func (s Raft_join_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_join_Results) DecodeFromPtr(p capnp.Ptr) Raft_join_Results {
	return Raft_join_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_join_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_join_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_join_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_join_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_join_Results) Nodes() (Raft_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Raft_List(p.List()), err
}

func (s Raft_join_Results) HasNodes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_join_Results) SetNodes(v Raft_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewNodes sets the nodes field to a newly
// allocated Raft_List, preferring placement in s's segment.
func (s Raft_join_Results) NewNodes(n int32) (Raft_List, error) {
	l, err := NewRaft_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Raft_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Raft_join_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Raft_join_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Raft_join_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Raft_join_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Raft_join_Results_List is a list of Raft_join_Results.
type Raft_join_Results_List = capnp.StructList[Raft_join_Results]

// NewRaft_join_Results creates a new list of Raft_join_Results.
func NewRaft_join_Results_List(s *capnp.Segment, sz int32) (Raft_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Raft_join_Results](l), err
}

// Raft_join_Results_Future is a wrapper for a Raft_join_Results promised by a client call.
type Raft_join_Results_Future struct{ *capnp.Future }

func (f Raft_join_Results_Future) Struct() (Raft_join_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_join_Results(p.Struct()), err
}

type Raft_leave_Params capnp.Struct

// Raft_leave_Params_TypeID is the unique identifier for the type Raft_leave_Params.
const Raft_leave_Params_TypeID = 0xf9ef9a25541688ef

func NewRaft_leave_Params(s *capnp.Segment) (Raft_leave_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Params(st), err
}

func NewRootRaft_leave_Params(s *capnp.Segment) (Raft_leave_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Params(st), err
}

func ReadRootRaft_leave_Params(msg *capnp.Message) (Raft_leave_Params, error) {
	root, err := msg.Root()
	return Raft_leave_Params(root.Struct()), err
}

func (s Raft_leave_Params) String() string {
	str, _ := text.Marshal(0xf9ef9a25541688ef, capnp.Struct(s))
	return str
}

func (s Raft_leave_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_leave_Params) DecodeFromPtr(p capnp.Ptr) Raft_leave_Params {
	return Raft_leave_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_leave_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_leave_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_leave_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_leave_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_leave_Params) Node() Raft {
	p, _ := capnp.Struct(s).Ptr(0)
	return Raft(p.Interface().Client())
}

func (s Raft_leave_Params) HasNode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_leave_Params) SetNode(v Raft) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Raft_leave_Params_List is a list of Raft_leave_Params.
type Raft_leave_Params_List = capnp.StructList[Raft_leave_Params]

// NewRaft_leave_Params creates a new list of Raft_leave_Params.
func NewRaft_leave_Params_List(s *capnp.Segment, sz int32) (Raft_leave_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_leave_Params](l), err
}

// Raft_leave_Params_Future is a wrapper for a Raft_leave_Params promised by a client call.
type Raft_leave_Params_Future struct{ *capnp.Future }

func (f Raft_leave_Params_Future) Struct() (Raft_leave_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_leave_Params(p.Struct()), err
}
func (p Raft_leave_Params_Future) Node() Raft {
	return Raft(p.Future.Field(0, nil).Client())
}

type Raft_leave_Results capnp.Struct

// Raft_leave_Results_TypeID is the unique identifier for the type Raft_leave_Results.
const Raft_leave_Results_TypeID = 0xf139b86f408c2bb0

func NewRaft_leave_Results(s *capnp.Segment) (Raft_leave_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(st), err
}

func NewRootRaft_leave_Results(s *capnp.Segment) (Raft_leave_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(st), err
}

func ReadRootRaft_leave_Results(msg *capnp.Message) (Raft_leave_Results, error) {
	root, err := msg.Root()
	return Raft_leave_Results(root.Struct()), err
}

func (s Raft_leave_Results) String() string {
	str, _ := text.Marshal(0xf139b86f408c2bb0, capnp.Struct(s))
	return str
}

func (s Raft_leave_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_leave_Results) DecodeFromPtr(p capnp.Ptr) Raft_leave_Results {
	return Raft_leave_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_leave_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_leave_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_leave_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_leave_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_leave_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_leave_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_leave_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_leave_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_leave_Results_List is a list of Raft_leave_Results.
type Raft_leave_Results_List = capnp.StructList[Raft_leave_Results]

// NewRaft_leave_Results creates a new list of Raft_leave_Results.
func NewRaft_leave_Results_List(s *capnp.Segment, sz int32) (Raft_leave_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_leave_Results](l), err
}

// Raft_leave_Results_Future is a wrapper for a Raft_leave_Results promised by a client call.
type Raft_leave_Results_Future struct{ *capnp.Future }

func (f Raft_leave_Results_Future) Struct() (Raft_leave_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_leave_Results(p.Struct()), err
}

type Raft_send_Params capnp.Struct

// Raft_send_Params_TypeID is the unique identifier for the type Raft_send_Params.
const Raft_send_Params_TypeID = 0xb1f8c610d8dbb7dd

func NewRaft_send_Params(s *capnp.Segment) (Raft_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Params(st), err
}

func NewRootRaft_send_Params(s *capnp.Segment) (Raft_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Params(st), err
}

func ReadRootRaft_send_Params(msg *capnp.Message) (Raft_send_Params, error) {
	root, err := msg.Root()
	return Raft_send_Params(root.Struct()), err
}

func (s Raft_send_Params) String() string {
	str, _ := text.Marshal(0xb1f8c610d8dbb7dd, capnp.Struct(s))
	return str
}

func (s Raft_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_send_Params) DecodeFromPtr(p capnp.Ptr) Raft_send_Params {
	return Raft_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_send_Params) Msg() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Raft_send_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_send_Params) SetMsg(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Raft_send_Params_List is a list of Raft_send_Params.
type Raft_send_Params_List = capnp.StructList[Raft_send_Params]

// NewRaft_send_Params creates a new list of Raft_send_Params.
func NewRaft_send_Params_List(s *capnp.Segment, sz int32) (Raft_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_send_Params](l), err
}

// Raft_send_Params_Future is a wrapper for a Raft_send_Params promised by a client call.
type Raft_send_Params_Future struct{ *capnp.Future }

func (f Raft_send_Params_Future) Struct() (Raft_send_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_send_Params(p.Struct()), err
}

type Raft_send_Results capnp.Struct

// Raft_send_Results_TypeID is the unique identifier for the type Raft_send_Results.
const Raft_send_Results_TypeID = 0xf26fa267f7ea2066

func NewRaft_send_Results(s *capnp.Segment) (Raft_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(st), err
}

func NewRootRaft_send_Results(s *capnp.Segment) (Raft_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(st), err
}

func ReadRootRaft_send_Results(msg *capnp.Message) (Raft_send_Results, error) {
	root, err := msg.Root()
	return Raft_send_Results(root.Struct()), err
}

func (s Raft_send_Results) String() string {
	str, _ := text.Marshal(0xf26fa267f7ea2066, capnp.Struct(s))
	return str
}

func (s Raft_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_send_Results) DecodeFromPtr(p capnp.Ptr) Raft_send_Results {
	return Raft_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_send_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_send_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_send_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_send_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_send_Results_List is a list of Raft_send_Results.
type Raft_send_Results_List = capnp.StructList[Raft_send_Results]

// NewRaft_send_Results creates a new list of Raft_send_Results.
func NewRaft_send_Results_List(s *capnp.Segment, sz int32) (Raft_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_send_Results](l), err
}

// Raft_send_Results_Future is a wrapper for a Raft_send_Results promised by a client call.
type Raft_send_Results_Future struct{ *capnp.Future }

func (f Raft_send_Results_Future) Struct() (Raft_send_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_send_Results(p.Struct()), err
}

type Raft_put_Params capnp.Struct

// Raft_put_Params_TypeID is the unique identifier for the type Raft_put_Params.
const Raft_put_Params_TypeID = 0xd063789821634bd8

func NewRaft_put_Params(s *capnp.Segment) (Raft_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Params(st), err
}

func NewRootRaft_put_Params(s *capnp.Segment) (Raft_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Params(st), err
}

func ReadRootRaft_put_Params(msg *capnp.Message) (Raft_put_Params, error) {
	root, err := msg.Root()
	return Raft_put_Params(root.Struct()), err
}

func (s Raft_put_Params) String() string {
	str, _ := text.Marshal(0xd063789821634bd8, capnp.Struct(s))
	return str
}

func (s Raft_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_put_Params) DecodeFromPtr(p capnp.Ptr) Raft_put_Params {
	return Raft_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_put_Params) Item() (Item, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Item(p.Struct()), err
}

func (s Raft_put_Params) HasItem() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_put_Params) SetItem(v Item) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewItem sets the item field to a newly
// allocated Item struct, preferring placement in s's segment.
func (s Raft_put_Params) NewItem() (Item, error) {
	ss, err := NewItem(capnp.Struct(s).Segment())
	if err != nil {
		return Item{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Raft_put_Params_List is a list of Raft_put_Params.
type Raft_put_Params_List = capnp.StructList[Raft_put_Params]

// NewRaft_put_Params creates a new list of Raft_put_Params.
func NewRaft_put_Params_List(s *capnp.Segment, sz int32) (Raft_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_put_Params](l), err
}

// Raft_put_Params_Future is a wrapper for a Raft_put_Params promised by a client call.
type Raft_put_Params_Future struct{ *capnp.Future }

func (f Raft_put_Params_Future) Struct() (Raft_put_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_put_Params(p.Struct()), err
}
func (p Raft_put_Params_Future) Item() Item_Future {
	return Item_Future{Future: p.Future.Field(0, nil)}
}

type Raft_put_Results capnp.Struct

// Raft_put_Results_TypeID is the unique identifier for the type Raft_put_Results.
const Raft_put_Results_TypeID = 0x9c4beb6b068077a3

func NewRaft_put_Results(s *capnp.Segment) (Raft_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(st), err
}

func NewRootRaft_put_Results(s *capnp.Segment) (Raft_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(st), err
}

func ReadRootRaft_put_Results(msg *capnp.Message) (Raft_put_Results, error) {
	root, err := msg.Root()
	return Raft_put_Results(root.Struct()), err
}

func (s Raft_put_Results) String() string {
	str, _ := text.Marshal(0x9c4beb6b068077a3, capnp.Struct(s))
	return str
}

func (s Raft_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_put_Results) DecodeFromPtr(p capnp.Ptr) Raft_put_Results {
	return Raft_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_put_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_put_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_put_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_put_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_put_Results_List is a list of Raft_put_Results.
type Raft_put_Results_List = capnp.StructList[Raft_put_Results]

// NewRaft_put_Results creates a new list of Raft_put_Results.
func NewRaft_put_Results_List(s *capnp.Segment, sz int32) (Raft_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_put_Results](l), err
}

// Raft_put_Results_Future is a wrapper for a Raft_put_Results promised by a client call.
type Raft_put_Results_Future struct{ *capnp.Future }

func (f Raft_put_Results_Future) Struct() (Raft_put_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_put_Results(p.Struct()), err
}

type Raft_list_Params capnp.Struct

// Raft_list_Params_TypeID is the unique identifier for the type Raft_list_Params.
const Raft_list_Params_TypeID = 0xf16297be3b2d1ee4

func NewRaft_list_Params(s *capnp.Segment) (Raft_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_list_Params(st), err
}

func NewRootRaft_list_Params(s *capnp.Segment) (Raft_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_list_Params(st), err
}

func ReadRootRaft_list_Params(msg *capnp.Message) (Raft_list_Params, error) {
	root, err := msg.Root()
	return Raft_list_Params(root.Struct()), err
}

func (s Raft_list_Params) String() string {
	str, _ := text.Marshal(0xf16297be3b2d1ee4, capnp.Struct(s))
	return str
}

func (s Raft_list_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_list_Params) DecodeFromPtr(p capnp.Ptr) Raft_list_Params {
	return Raft_list_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_list_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_list_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_list_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_list_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_list_Params_List is a list of Raft_list_Params.
type Raft_list_Params_List = capnp.StructList[Raft_list_Params]

// NewRaft_list_Params creates a new list of Raft_list_Params.
func NewRaft_list_Params_List(s *capnp.Segment, sz int32) (Raft_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_list_Params](l), err
}

// Raft_list_Params_Future is a wrapper for a Raft_list_Params promised by a client call.
type Raft_list_Params_Future struct{ *capnp.Future }

func (f Raft_list_Params_Future) Struct() (Raft_list_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_list_Params(p.Struct()), err
}

type Raft_list_Results capnp.Struct

// Raft_list_Results_TypeID is the unique identifier for the type Raft_list_Results.
const Raft_list_Results_TypeID = 0xeb05cc390961a49a

func NewRaft_list_Results(s *capnp.Segment) (Raft_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_list_Results(st), err
}

func NewRootRaft_list_Results(s *capnp.Segment) (Raft_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_list_Results(st), err
}

func ReadRootRaft_list_Results(msg *capnp.Message) (Raft_list_Results, error) {
	root, err := msg.Root()
	return Raft_list_Results(root.Struct()), err
}

func (s Raft_list_Results) String() string {
	str, _ := text.Marshal(0xeb05cc390961a49a, capnp.Struct(s))
	return str
}

func (s Raft_list_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_list_Results) DecodeFromPtr(p capnp.Ptr) Raft_list_Results {
	return Raft_list_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_list_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_list_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_list_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_list_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_list_Results) Objects() (Item_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Item_List(p.List()), err
}

func (s Raft_list_Results) HasObjects() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_list_Results) SetObjects(v Item_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewObjects sets the objects field to a newly
// allocated Item_List, preferring placement in s's segment.
func (s Raft_list_Results) NewObjects(n int32) (Item_List, error) {
	l, err := NewItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Item_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Raft_list_Results_List is a list of Raft_list_Results.
type Raft_list_Results_List = capnp.StructList[Raft_list_Results]

// NewRaft_list_Results creates a new list of Raft_list_Results.
func NewRaft_list_Results_List(s *capnp.Segment, sz int32) (Raft_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_list_Results](l), err
}

// Raft_list_Results_Future is a wrapper for a Raft_list_Results promised by a client call.
type Raft_list_Results_Future struct{ *capnp.Future }

func (f Raft_list_Results_Future) Struct() (Raft_list_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_list_Results(p.Struct()), err
}

type Raft_members_Params capnp.Struct

// Raft_members_Params_TypeID is the unique identifier for the type Raft_members_Params.
const Raft_members_Params_TypeID = 0xf561891b2176587a

func NewRaft_members_Params(s *capnp.Segment) (Raft_members_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_members_Params(st), err
}

func NewRootRaft_members_Params(s *capnp.Segment) (Raft_members_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_members_Params(st), err
}

func ReadRootRaft_members_Params(msg *capnp.Message) (Raft_members_Params, error) {
	root, err := msg.Root()
	return Raft_members_Params(root.Struct()), err
}

func (s Raft_members_Params) String() string {
	str, _ := text.Marshal(0xf561891b2176587a, capnp.Struct(s))
	return str
}

func (s Raft_members_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_members_Params) DecodeFromPtr(p capnp.Ptr) Raft_members_Params {
	return Raft_members_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_members_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_members_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_members_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_members_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_members_Params_List is a list of Raft_members_Params.
type Raft_members_Params_List = capnp.StructList[Raft_members_Params]

// NewRaft_members_Params creates a new list of Raft_members_Params.
func NewRaft_members_Params_List(s *capnp.Segment, sz int32) (Raft_members_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_members_Params](l), err
}

// Raft_members_Params_Future is a wrapper for a Raft_members_Params promised by a client call.
type Raft_members_Params_Future struct{ *capnp.Future }

func (f Raft_members_Params_Future) Struct() (Raft_members_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_members_Params(p.Struct()), err
}

type Raft_members_Results capnp.Struct

// Raft_members_Results_TypeID is the unique identifier for the type Raft_members_Results.
const Raft_members_Results_TypeID = 0xbd2f697b2c16b9a9

func NewRaft_members_Results(s *capnp.Segment) (Raft_members_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(st), err
}

func NewRootRaft_members_Results(s *capnp.Segment) (Raft_members_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(st), err
}

func ReadRootRaft_members_Results(msg *capnp.Message) (Raft_members_Results, error) {
	root, err := msg.Root()
	return Raft_members_Results(root.Struct()), err
}

func (s Raft_members_Results) String() string {
	str, _ := text.Marshal(0xbd2f697b2c16b9a9, capnp.Struct(s))
	return str
}

func (s Raft_members_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_members_Results) DecodeFromPtr(p capnp.Ptr) Raft_members_Results {
	return Raft_members_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_members_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_members_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_members_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_members_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_members_Results) Members() (Raft_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Raft_List(p.List()), err
}

func (s Raft_members_Results) HasMembers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_members_Results) SetMembers(v Raft_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMembers sets the members field to a newly
// allocated Raft_List, preferring placement in s's segment.
func (s Raft_members_Results) NewMembers(n int32) (Raft_List, error) {
	l, err := NewRaft_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Raft_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Raft_members_Results_List is a list of Raft_members_Results.
type Raft_members_Results_List = capnp.StructList[Raft_members_Results]

// NewRaft_members_Results creates a new list of Raft_members_Results.
func NewRaft_members_Results_List(s *capnp.Segment, sz int32) (Raft_members_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_members_Results](l), err
}

// Raft_members_Results_Future is a wrapper for a Raft_members_Results promised by a client call.
type Raft_members_Results_Future struct{ *capnp.Future }

func (f Raft_members_Results_Future) Struct() (Raft_members_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_members_Results(p.Struct()), err
}

type Raft_id_Params capnp.Struct

// Raft_id_Params_TypeID is the unique identifier for the type Raft_id_Params.
const Raft_id_Params_TypeID = 0xa8563660e0af9da4

func NewRaft_id_Params(s *capnp.Segment) (Raft_id_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_id_Params(st), err
}

func NewRootRaft_id_Params(s *capnp.Segment) (Raft_id_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_id_Params(st), err
}

func ReadRootRaft_id_Params(msg *capnp.Message) (Raft_id_Params, error) {
	root, err := msg.Root()
	return Raft_id_Params(root.Struct()), err
}

func (s Raft_id_Params) String() string {
	str, _ := text.Marshal(0xa8563660e0af9da4, capnp.Struct(s))
	return str
}

func (s Raft_id_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_id_Params) DecodeFromPtr(p capnp.Ptr) Raft_id_Params {
	return Raft_id_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_id_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_id_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_id_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_id_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_id_Params_List is a list of Raft_id_Params.
type Raft_id_Params_List = capnp.StructList[Raft_id_Params]

// NewRaft_id_Params creates a new list of Raft_id_Params.
func NewRaft_id_Params_List(s *capnp.Segment, sz int32) (Raft_id_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_id_Params](l), err
}

// Raft_id_Params_Future is a wrapper for a Raft_id_Params promised by a client call.
type Raft_id_Params_Future struct{ *capnp.Future }

func (f Raft_id_Params_Future) Struct() (Raft_id_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_id_Params(p.Struct()), err
}

type Raft_id_Results capnp.Struct

// Raft_id_Results_TypeID is the unique identifier for the type Raft_id_Results.
const Raft_id_Results_TypeID = 0xc07b385c303c1f57

func NewRaft_id_Results(s *capnp.Segment) (Raft_id_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Raft_id_Results(st), err
}

func NewRootRaft_id_Results(s *capnp.Segment) (Raft_id_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Raft_id_Results(st), err
}

func ReadRootRaft_id_Results(msg *capnp.Message) (Raft_id_Results, error) {
	root, err := msg.Root()
	return Raft_id_Results(root.Struct()), err
}

func (s Raft_id_Results) String() string {
	str, _ := text.Marshal(0xc07b385c303c1f57, capnp.Struct(s))
	return str
}

func (s Raft_id_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_id_Results) DecodeFromPtr(p capnp.Ptr) Raft_id_Results {
	return Raft_id_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_id_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_id_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_id_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_id_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_id_Results) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Raft_id_Results) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Raft_id_Results_List is a list of Raft_id_Results.
type Raft_id_Results_List = capnp.StructList[Raft_id_Results]

// NewRaft_id_Results creates a new list of Raft_id_Results.
func NewRaft_id_Results_List(s *capnp.Segment, sz int32) (Raft_id_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Raft_id_Results](l), err
}

// Raft_id_Results_Future is a wrapper for a Raft_id_Results promised by a client call.
type Raft_id_Results_Future struct{ *capnp.Future }

func (f Raft_id_Results_Future) Struct() (Raft_id_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_id_Results(p.Struct()), err
}

type Item capnp.Struct

// Item_TypeID is the unique identifier for the type Item.
const Item_TypeID = 0xae462da6618b7135

func NewItem(s *capnp.Segment) (Item, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Item(st), err
}

func NewRootItem(s *capnp.Segment) (Item, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Item(st), err
}

func ReadRootItem(msg *capnp.Message) (Item, error) {
	root, err := msg.Root()
	return Item(root.Struct()), err
}

func (s Item) String() string {
	str, _ := text.Marshal(0xae462da6618b7135, capnp.Struct(s))
	return str
}

func (s Item) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Item) DecodeFromPtr(p capnp.Ptr) Item {
	return Item(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Item) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Item) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Item) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Item) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Item) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Item) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Item) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Item) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Item) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Item) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// Item_List is a list of Item.
type Item_List = capnp.StructList[Item]

// NewItem creates a new list of Item.
func NewItem_List(s *capnp.Segment, sz int32) (Item_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Item](l), err
}

// Item_Future is a wrapper for a Item promised by a client call.
type Item_Future struct{ *capnp.Future }

func (f Item_Future) Struct() (Item, error) {
	p, err := f.Future.Ptr()
	return Item(p.Struct()), err
}

const schema_8dcfa60b52844164 = "x\xda\x9cT]\x88\x1bU\x18\xfd\xce\xbd\xf3\xd3e\xbb" +
	"M.S\x0aV1vI\xc1V\xa3\xbb[W\xba\xd5" +
	"\xb2\xd3\"B)B&\xf8\xb7\xa0\xd0\xd9\xe4\xb6\xa6\xcd" +
	"_3\x93\xadZ\x16\xa5\xba`P\xf1I\x94b\x05\xb5" +
	"\x14\xfbP\xad(h\x1fZ\xf5\xc1\xfa\xa0\xa2\xf5\xa9(" +
	"\x82\x14Ah\x1f\x96\xad\x14\xab/#w\x9a\x99L\xdc" +
	"\x04Y\xdf\x929\xf7;\xdf\xb9\xe7;\xdf\x1d+0[" +
	"\x1b\x1f\xf9\xdd \xe6\xe4u#x\xef\xd0\xf3\xc6\x81+" +
	"\xbb\xdf\"\x91\x06\x91\x0e\x93\xc8\x9a\xe1\x97\x08\xd6\x93|" +
	"\x9a\x10\x1c?\xf6\xe1\xaf{\xee}\xf4\xfd\x1b\xb8\xa6\xe0" +
	"y\xfe#i\xc1\xe4\xc1\x97\xdd\x13\xb9\x07? 1\x8c" +
	"\xa0\xb4\xe3\xc5\xc2\xf0\x89\xef_%\x9d\xa9\x13.?b" +
	"I~\xe3\xd7!B\xf0\xda\x1f\x1f\xdf\xd4zj\xe8t" +
	"\xa7Ix\xe6,\xbfL\xb0\xbe\x0c\xf1_>\xfd\xf9b" +
	"\xfa\xfc\xf5\x8f\x92\"r\x9a\x121\xae)\x11'\xcf\xac" +
	"\xbb\xf3p\xf9\xee\xb3\x09|\x8b\xa31\x10\xacG\xc2\x03" +
	"\xdfl\xdf\x93\x1em|\xf29\x89a\xde\x15C\xb0\x16" +
	"\xb4#V[\xa9\xde\xb2\xa0}\x0d\xeb\x98n\x12\x05\x8f" +
	"e\xee\x1f{b\xeb\xe1/\xc8I#\xba\xd4\x82\xfe\x13" +
	"\xc1j\xeb\x8a\xed\x85\x99\xf9\xb7\xcf-^?\x9f\x94s" +
	"RWrN\x85\xf8\xc5\xdd\xc5\x0do>]\xfc!\x89" +
	"\x7f\x17\xd6_\x08\xf1\xa3\xc7\xdd\xa1\xa9o\xf5+I|" +
	"IW\xd7\xbd\x16\xe2\xa7\xefx\xc5\xae\x7f6\xb5\x94\xc4" +
	"7\x1aW\x09\xd6&C\xe1\xbf\xdd\x9a\xbb\xef\xdc\x1b\xb3" +
	"K\x09\xcfw\x19\x97H\x0b\xf6\xdev\xf9\xcf}\xef\xd6" +
	"\xaf\xf6\xf8d(\xe2\xf1\xb0\xf0\xd9\xc7\xe76\xdc\xdcv" +
	"\xaf%\x0a\x1d\xe3o\xd2\x82\xc5\x97\xd6=\xbc\xf1\xe8\xe2" +
	"_\xc9\xc2\xc9\xb0p\xca\x98\xa6\\\xd0t\xf7\xfaw\x15" +
	"\xdd\x06\xab5\xb6\x15\xd4\xefF\xcb\xcf\x16\xa4\xd72+" +
	"\xbe\xe7h\\#\xd2@$F&\x88\x9cU\x1c\xceZ" +
	"\x86\x8cl6\xebM\xac&\x86\xd5\x84\xe5\x14\xe5R6" +
	"\xef6\xdd*\xbc\x18C\xad\xb1m\x97/\xab\x94\x07\x9c" +
	"U1\xeb\xa6Q\"'\xcb\xe1\x8c1\x08`\xad\x1a\x8a" +
	"\xc8\xa9V\xb7s8\xf70\x98\x07\xe43\x18!\x86\x11" +
	"Bf\xce\xad\xb4d\xf4oy\xdb\xfd\xf5rMIO" +
	"\xb5\x94\xf4D\x93\x89N\x13;\xd1d\xbb\xfa\xb8\x95\xc3" +
	"y\x80!S\xab\x97\xa4\x875\x84<\x07D7S\x04" +
	"\xf5\xf1\xbf\xae\xeb\xc9Zxa\xd3\xad\xf686\xdau" +
	"\xcc\xacz\xfb\x96\x09\xe7\x11AUVge\xd3\x0bm" +
	"\xaf\xf8\x1e%IvvH\xb2\x0c\xcfu\xce\x0d\x14\xda" +
	"\xe3\xb6b\x0e\xdd\xbe\x85\xebDq\xb2\x11m\xa4\xb8\xb0" +
	"\x99\x98\xf8\xca\x04\xe2\x8c \x8a\xa783AL\x9c2" +
	"\xc1\xe2\x05E\x94@\xf1\x8e\xaa{\xdd\x04\x8f\xb7\x01\xd1" +
	"S\"\xda\xa3\xc4\xc4\xbc\x09-N2\xa2\x95\x10\x07U" +
	"\x9d4\xa1\xc7aE\xb4\xddbf'1\xf1\x90\x09#" +
	"~u\x10\xad\xaa\xd8\xb1\x9e\x98\x984Sj\xbc62" +
	"\x15\xe9\xceI\x1b)\xe5\xba\x0d\xb3\xd1\xf2m\xa4*e" +
	"\xcf\xb7c\x83l\xf0r\xc9F\x1e\xfd\xb3\x19\xda\xcc{" +
	"\xd3\xbd\xbe;+^.a\x88\x18\x86\x06f\xac\xcf\xac" +
	"7w\xebS*M\xff\x1a\x8e\xe8\xc7\xa56M\xed\x09" +
	"\x1fLU\xf6e\x15\xe9\xee\x8bK@\xba\x1f\x95\xba\x7f" +
	"7\xfa\x03\xe2S\x9f\xdd/\x8b~\x1c\x9f^\xda5}" +
	"i\x95\xd7\xd9\x82\xccx\xad\xff\xff\x1a\x84\xda:\x96\x0d" +
	"X\x9e~\xcaW\xd0!\xda\x9f\xe9\xf0\xd5\xf1\x06\xdd#" +
	"\xef\xa6\x9a+\x1e\xdb?\x01\x00\x00\xff\xff\x8e\xc3\xdb\x84"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8dcfa60b52844164,
		Nodes: []uint64{
			0x9c4beb6b068077a3,
			0xa8563660e0af9da4,
			0xae462da6618b7135,
			0xb009687519b3f38f,
			0xb1f8c610d8dbb7dd,
			0xbd2f697b2c16b9a9,
			0xbfb4702210603dcb,
			0xc07b385c303c1f57,
			0xc6f8efbe9e7d5983,
			0xd063789821634bd8,
			0xeb05cc390961a49a,
			0xf139b86f408c2bb0,
			0xf16297be3b2d1ee4,
			0xf26fa267f7ea2066,
			0xf561891b2176587a,
			0xf9ef9a25541688ef,
		},
		Compressed: true,
	})
}
