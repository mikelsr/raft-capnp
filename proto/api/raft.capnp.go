// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Raft capnp.Client

// Raft_TypeID is the unique identifier for the type Raft.
const Raft_TypeID = 0xbfb4702210603dcb

func (c Raft) Join(ctx context.Context, params func(Raft_join_Params) error) (Raft_join_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      0,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_join_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_join_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Leave(ctx context.Context, params func(Raft_leave_Params) error) (Raft_leave_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      1,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "leave",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_leave_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_leave_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Send(ctx context.Context, params func(Raft_send_Params) error) (Raft_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      2,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_send_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Put(ctx context.Context, params func(Raft_put_Params) error) (Raft_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      3,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_put_Results_Future{Future: ans.Future()}, release

}

func (c Raft) List(ctx context.Context, params func(Raft_list_Params) error) (Raft_list_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      4,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "list",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_list_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_list_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Members(ctx context.Context, params func(Raft_members_Params) error) (Raft_members_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      5,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "members",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_members_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_members_Results_Future{Future: ans.Future()}, release

}

func (c Raft) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Raft) String() string {
	return "Raft(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Raft) AddRef() Raft {
	return Raft(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Raft) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Raft) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Raft) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Raft) DecodeFromPtr(p capnp.Ptr) Raft {
	return Raft(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Raft) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Raft) IsSame(other Raft) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Raft) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Raft) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Raft_Server is a Raft with a local implementation.
type Raft_Server interface {
	Join(context.Context, Raft_join) error

	Leave(context.Context, Raft_leave) error

	Send(context.Context, Raft_send) error

	Put(context.Context, Raft_put) error

	List(context.Context, Raft_list) error

	Members(context.Context, Raft_members) error
}

// Raft_NewServer creates a new Server from an implementation of Raft_Server.
func Raft_NewServer(s Raft_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Raft_Methods(nil, s), s, c)
}

// Raft_ServerToClient creates a new Client from an implementation of Raft_Server.
// The caller is responsible for calling Release on the returned Client.
func Raft_ServerToClient(s Raft_Server) Raft {
	return Raft(capnp.NewClient(Raft_NewServer(s)))
}

// Raft_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Raft_Methods(methods []server.Method, s Raft_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      0,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, Raft_join{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      1,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "leave",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Leave(ctx, Raft_leave{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      2,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, Raft_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      3,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, Raft_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      4,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "list",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.List(ctx, Raft_list{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      5,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "members",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Members(ctx, Raft_members{call})
		},
	})

	return methods
}

// Raft_join holds the state for a server call to Raft.join.
// See server.Call for documentation.
type Raft_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_join) Args() Raft_join_Params {
	return Raft_join_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_join) AllocResults() (Raft_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(r), err
}

// Raft_leave holds the state for a server call to Raft.leave.
// See server.Call for documentation.
type Raft_leave struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_leave) Args() Raft_leave_Params {
	return Raft_leave_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_leave) AllocResults() (Raft_leave_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(r), err
}

// Raft_send holds the state for a server call to Raft.send.
// See server.Call for documentation.
type Raft_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_send) Args() Raft_send_Params {
	return Raft_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_send) AllocResults() (Raft_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(r), err
}

// Raft_put holds the state for a server call to Raft.put.
// See server.Call for documentation.
type Raft_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_put) Args() Raft_put_Params {
	return Raft_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_put) AllocResults() (Raft_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(r), err
}

// Raft_list holds the state for a server call to Raft.list.
// See server.Call for documentation.
type Raft_list struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_list) Args() Raft_list_Params {
	return Raft_list_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_list) AllocResults() (Raft_list_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_list_Results(r), err
}

// Raft_members holds the state for a server call to Raft.members.
// See server.Call for documentation.
type Raft_members struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_members) Args() Raft_members_Params {
	return Raft_members_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_members) AllocResults() (Raft_members_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(r), err
}

// Raft_List is a list of Raft.
type Raft_List = capnp.CapList[Raft]

// NewRaft creates a new list of Raft.
func NewRaft_List(s *capnp.Segment, sz int32) (Raft_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Raft](l), err
}

type Raft_join_Params capnp.Struct

// Raft_join_Params_TypeID is the unique identifier for the type Raft_join_Params.
const Raft_join_Params_TypeID = 0xc6f8efbe9e7d5983

func NewRaft_join_Params(s *capnp.Segment) (Raft_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_join_Params(st), err
}

func NewRootRaft_join_Params(s *capnp.Segment) (Raft_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_join_Params(st), err
}

func ReadRootRaft_join_Params(msg *capnp.Message) (Raft_join_Params, error) {
	root, err := msg.Root()
	return Raft_join_Params(root.Struct()), err
}

func (s Raft_join_Params) String() string {
	str, _ := text.Marshal(0xc6f8efbe9e7d5983, capnp.Struct(s))
	return str
}

func (s Raft_join_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_join_Params) DecodeFromPtr(p capnp.Ptr) Raft_join_Params {
	return Raft_join_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_join_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_join_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_join_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_join_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_join_Params) NodeInfo() (NodeInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NodeInfo(p.Struct()), err
}

func (s Raft_join_Params) HasNodeInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_join_Params) SetNodeInfo(v NodeInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNodeInfo sets the nodeInfo field to a newly
// allocated NodeInfo struct, preferring placement in s's segment.
func (s Raft_join_Params) NewNodeInfo() (NodeInfo, error) {
	ss, err := NewNodeInfo(capnp.Struct(s).Segment())
	if err != nil {
		return NodeInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Raft_join_Params_List is a list of Raft_join_Params.
type Raft_join_Params_List = capnp.StructList[Raft_join_Params]

// NewRaft_join_Params creates a new list of Raft_join_Params.
func NewRaft_join_Params_List(s *capnp.Segment, sz int32) (Raft_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_join_Params](l), err
}

// Raft_join_Params_Future is a wrapper for a Raft_join_Params promised by a client call.
type Raft_join_Params_Future struct{ *capnp.Future }

func (f Raft_join_Params_Future) Struct() (Raft_join_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_join_Params(p.Struct()), err
}
func (p Raft_join_Params_Future) NodeInfo() NodeInfo_Future {
	return NodeInfo_Future{Future: p.Future.Field(0, nil)}
}

type Raft_join_Results capnp.Struct

// Raft_join_Results_TypeID is the unique identifier for the type Raft_join_Results.
const Raft_join_Results_TypeID = 0xb009687519b3f38f

func NewRaft_join_Results(s *capnp.Segment) (Raft_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(st), err
}

func NewRootRaft_join_Results(s *capnp.Segment) (Raft_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(st), err
}

func ReadRootRaft_join_Results(msg *capnp.Message) (Raft_join_Results, error) {
	root, err := msg.Root()
	return Raft_join_Results(root.Struct()), err
}

func (s Raft_join_Results) String() string {
	str, _ := text.Marshal(0xb009687519b3f38f, capnp.Struct(s))
	return str
}

func (s Raft_join_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_join_Results) DecodeFromPtr(p capnp.Ptr) Raft_join_Results {
	return Raft_join_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_join_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_join_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_join_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_join_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_join_Results) Nodes() (NodeInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NodeInfo_List(p.List()), err
}

func (s Raft_join_Results) HasNodes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_join_Results) SetNodes(v NodeInfo_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewNodes sets the nodes field to a newly
// allocated NodeInfo_List, preferring placement in s's segment.
func (s Raft_join_Results) NewNodes(n int32) (NodeInfo_List, error) {
	l, err := NewNodeInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NodeInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Raft_join_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Raft_join_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Raft_join_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Raft_join_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Raft_join_Results_List is a list of Raft_join_Results.
type Raft_join_Results_List = capnp.StructList[Raft_join_Results]

// NewRaft_join_Results creates a new list of Raft_join_Results.
func NewRaft_join_Results_List(s *capnp.Segment, sz int32) (Raft_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Raft_join_Results](l), err
}

// Raft_join_Results_Future is a wrapper for a Raft_join_Results promised by a client call.
type Raft_join_Results_Future struct{ *capnp.Future }

func (f Raft_join_Results_Future) Struct() (Raft_join_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_join_Results(p.Struct()), err
}

type Raft_leave_Params capnp.Struct

// Raft_leave_Params_TypeID is the unique identifier for the type Raft_leave_Params.
const Raft_leave_Params_TypeID = 0xf9ef9a25541688ef

func NewRaft_leave_Params(s *capnp.Segment) (Raft_leave_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Params(st), err
}

func NewRootRaft_leave_Params(s *capnp.Segment) (Raft_leave_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Params(st), err
}

func ReadRootRaft_leave_Params(msg *capnp.Message) (Raft_leave_Params, error) {
	root, err := msg.Root()
	return Raft_leave_Params(root.Struct()), err
}

func (s Raft_leave_Params) String() string {
	str, _ := text.Marshal(0xf9ef9a25541688ef, capnp.Struct(s))
	return str
}

func (s Raft_leave_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_leave_Params) DecodeFromPtr(p capnp.Ptr) Raft_leave_Params {
	return Raft_leave_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_leave_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_leave_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_leave_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_leave_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_leave_Params) NodeInfo() (NodeInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NodeInfo(p.Struct()), err
}

func (s Raft_leave_Params) HasNodeInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_leave_Params) SetNodeInfo(v NodeInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNodeInfo sets the nodeInfo field to a newly
// allocated NodeInfo struct, preferring placement in s's segment.
func (s Raft_leave_Params) NewNodeInfo() (NodeInfo, error) {
	ss, err := NewNodeInfo(capnp.Struct(s).Segment())
	if err != nil {
		return NodeInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Raft_leave_Params_List is a list of Raft_leave_Params.
type Raft_leave_Params_List = capnp.StructList[Raft_leave_Params]

// NewRaft_leave_Params creates a new list of Raft_leave_Params.
func NewRaft_leave_Params_List(s *capnp.Segment, sz int32) (Raft_leave_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_leave_Params](l), err
}

// Raft_leave_Params_Future is a wrapper for a Raft_leave_Params promised by a client call.
type Raft_leave_Params_Future struct{ *capnp.Future }

func (f Raft_leave_Params_Future) Struct() (Raft_leave_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_leave_Params(p.Struct()), err
}
func (p Raft_leave_Params_Future) NodeInfo() NodeInfo_Future {
	return NodeInfo_Future{Future: p.Future.Field(0, nil)}
}

type Raft_leave_Results capnp.Struct

// Raft_leave_Results_TypeID is the unique identifier for the type Raft_leave_Results.
const Raft_leave_Results_TypeID = 0xf139b86f408c2bb0

func NewRaft_leave_Results(s *capnp.Segment) (Raft_leave_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(st), err
}

func NewRootRaft_leave_Results(s *capnp.Segment) (Raft_leave_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(st), err
}

func ReadRootRaft_leave_Results(msg *capnp.Message) (Raft_leave_Results, error) {
	root, err := msg.Root()
	return Raft_leave_Results(root.Struct()), err
}

func (s Raft_leave_Results) String() string {
	str, _ := text.Marshal(0xf139b86f408c2bb0, capnp.Struct(s))
	return str
}

func (s Raft_leave_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_leave_Results) DecodeFromPtr(p capnp.Ptr) Raft_leave_Results {
	return Raft_leave_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_leave_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_leave_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_leave_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_leave_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_leave_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_leave_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_leave_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_leave_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_leave_Results_List is a list of Raft_leave_Results.
type Raft_leave_Results_List = capnp.StructList[Raft_leave_Results]

// NewRaft_leave_Results creates a new list of Raft_leave_Results.
func NewRaft_leave_Results_List(s *capnp.Segment, sz int32) (Raft_leave_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_leave_Results](l), err
}

// Raft_leave_Results_Future is a wrapper for a Raft_leave_Results promised by a client call.
type Raft_leave_Results_Future struct{ *capnp.Future }

func (f Raft_leave_Results_Future) Struct() (Raft_leave_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_leave_Results(p.Struct()), err
}

type Raft_send_Params capnp.Struct

// Raft_send_Params_TypeID is the unique identifier for the type Raft_send_Params.
const Raft_send_Params_TypeID = 0xb1f8c610d8dbb7dd

func NewRaft_send_Params(s *capnp.Segment) (Raft_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Params(st), err
}

func NewRootRaft_send_Params(s *capnp.Segment) (Raft_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Params(st), err
}

func ReadRootRaft_send_Params(msg *capnp.Message) (Raft_send_Params, error) {
	root, err := msg.Root()
	return Raft_send_Params(root.Struct()), err
}

func (s Raft_send_Params) String() string {
	str, _ := text.Marshal(0xb1f8c610d8dbb7dd, capnp.Struct(s))
	return str
}

func (s Raft_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_send_Params) DecodeFromPtr(p capnp.Ptr) Raft_send_Params {
	return Raft_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_send_Params) Msg() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Raft_send_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_send_Params) SetMsg(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Raft_send_Params_List is a list of Raft_send_Params.
type Raft_send_Params_List = capnp.StructList[Raft_send_Params]

// NewRaft_send_Params creates a new list of Raft_send_Params.
func NewRaft_send_Params_List(s *capnp.Segment, sz int32) (Raft_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_send_Params](l), err
}

// Raft_send_Params_Future is a wrapper for a Raft_send_Params promised by a client call.
type Raft_send_Params_Future struct{ *capnp.Future }

func (f Raft_send_Params_Future) Struct() (Raft_send_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_send_Params(p.Struct()), err
}

type Raft_send_Results capnp.Struct

// Raft_send_Results_TypeID is the unique identifier for the type Raft_send_Results.
const Raft_send_Results_TypeID = 0xf26fa267f7ea2066

func NewRaft_send_Results(s *capnp.Segment) (Raft_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(st), err
}

func NewRootRaft_send_Results(s *capnp.Segment) (Raft_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(st), err
}

func ReadRootRaft_send_Results(msg *capnp.Message) (Raft_send_Results, error) {
	root, err := msg.Root()
	return Raft_send_Results(root.Struct()), err
}

func (s Raft_send_Results) String() string {
	str, _ := text.Marshal(0xf26fa267f7ea2066, capnp.Struct(s))
	return str
}

func (s Raft_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_send_Results) DecodeFromPtr(p capnp.Ptr) Raft_send_Results {
	return Raft_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_send_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_send_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_send_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_send_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_send_Results_List is a list of Raft_send_Results.
type Raft_send_Results_List = capnp.StructList[Raft_send_Results]

// NewRaft_send_Results creates a new list of Raft_send_Results.
func NewRaft_send_Results_List(s *capnp.Segment, sz int32) (Raft_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_send_Results](l), err
}

// Raft_send_Results_Future is a wrapper for a Raft_send_Results promised by a client call.
type Raft_send_Results_Future struct{ *capnp.Future }

func (f Raft_send_Results_Future) Struct() (Raft_send_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_send_Results(p.Struct()), err
}

type Raft_put_Params capnp.Struct

// Raft_put_Params_TypeID is the unique identifier for the type Raft_put_Params.
const Raft_put_Params_TypeID = 0xd063789821634bd8

func NewRaft_put_Params(s *capnp.Segment) (Raft_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Params(st), err
}

func NewRootRaft_put_Params(s *capnp.Segment) (Raft_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Params(st), err
}

func ReadRootRaft_put_Params(msg *capnp.Message) (Raft_put_Params, error) {
	root, err := msg.Root()
	return Raft_put_Params(root.Struct()), err
}

func (s Raft_put_Params) String() string {
	str, _ := text.Marshal(0xd063789821634bd8, capnp.Struct(s))
	return str
}

func (s Raft_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_put_Params) DecodeFromPtr(p capnp.Ptr) Raft_put_Params {
	return Raft_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_put_Params) Item() (Item, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Item(p.Struct()), err
}

func (s Raft_put_Params) HasItem() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_put_Params) SetItem(v Item) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewItem sets the item field to a newly
// allocated Item struct, preferring placement in s's segment.
func (s Raft_put_Params) NewItem() (Item, error) {
	ss, err := NewItem(capnp.Struct(s).Segment())
	if err != nil {
		return Item{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Raft_put_Params_List is a list of Raft_put_Params.
type Raft_put_Params_List = capnp.StructList[Raft_put_Params]

// NewRaft_put_Params creates a new list of Raft_put_Params.
func NewRaft_put_Params_List(s *capnp.Segment, sz int32) (Raft_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_put_Params](l), err
}

// Raft_put_Params_Future is a wrapper for a Raft_put_Params promised by a client call.
type Raft_put_Params_Future struct{ *capnp.Future }

func (f Raft_put_Params_Future) Struct() (Raft_put_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_put_Params(p.Struct()), err
}
func (p Raft_put_Params_Future) Item() Item_Future {
	return Item_Future{Future: p.Future.Field(0, nil)}
}

type Raft_put_Results capnp.Struct

// Raft_put_Results_TypeID is the unique identifier for the type Raft_put_Results.
const Raft_put_Results_TypeID = 0x9c4beb6b068077a3

func NewRaft_put_Results(s *capnp.Segment) (Raft_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(st), err
}

func NewRootRaft_put_Results(s *capnp.Segment) (Raft_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(st), err
}

func ReadRootRaft_put_Results(msg *capnp.Message) (Raft_put_Results, error) {
	root, err := msg.Root()
	return Raft_put_Results(root.Struct()), err
}

func (s Raft_put_Results) String() string {
	str, _ := text.Marshal(0x9c4beb6b068077a3, capnp.Struct(s))
	return str
}

func (s Raft_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_put_Results) DecodeFromPtr(p capnp.Ptr) Raft_put_Results {
	return Raft_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_put_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_put_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_put_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_put_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_put_Results_List is a list of Raft_put_Results.
type Raft_put_Results_List = capnp.StructList[Raft_put_Results]

// NewRaft_put_Results creates a new list of Raft_put_Results.
func NewRaft_put_Results_List(s *capnp.Segment, sz int32) (Raft_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_put_Results](l), err
}

// Raft_put_Results_Future is a wrapper for a Raft_put_Results promised by a client call.
type Raft_put_Results_Future struct{ *capnp.Future }

func (f Raft_put_Results_Future) Struct() (Raft_put_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_put_Results(p.Struct()), err
}

type Raft_list_Params capnp.Struct

// Raft_list_Params_TypeID is the unique identifier for the type Raft_list_Params.
const Raft_list_Params_TypeID = 0xf16297be3b2d1ee4

func NewRaft_list_Params(s *capnp.Segment) (Raft_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_list_Params(st), err
}

func NewRootRaft_list_Params(s *capnp.Segment) (Raft_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_list_Params(st), err
}

func ReadRootRaft_list_Params(msg *capnp.Message) (Raft_list_Params, error) {
	root, err := msg.Root()
	return Raft_list_Params(root.Struct()), err
}

func (s Raft_list_Params) String() string {
	str, _ := text.Marshal(0xf16297be3b2d1ee4, capnp.Struct(s))
	return str
}

func (s Raft_list_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_list_Params) DecodeFromPtr(p capnp.Ptr) Raft_list_Params {
	return Raft_list_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_list_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_list_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_list_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_list_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_list_Params_List is a list of Raft_list_Params.
type Raft_list_Params_List = capnp.StructList[Raft_list_Params]

// NewRaft_list_Params creates a new list of Raft_list_Params.
func NewRaft_list_Params_List(s *capnp.Segment, sz int32) (Raft_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_list_Params](l), err
}

// Raft_list_Params_Future is a wrapper for a Raft_list_Params promised by a client call.
type Raft_list_Params_Future struct{ *capnp.Future }

func (f Raft_list_Params_Future) Struct() (Raft_list_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_list_Params(p.Struct()), err
}

type Raft_list_Results capnp.Struct

// Raft_list_Results_TypeID is the unique identifier for the type Raft_list_Results.
const Raft_list_Results_TypeID = 0xeb05cc390961a49a

func NewRaft_list_Results(s *capnp.Segment) (Raft_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_list_Results(st), err
}

func NewRootRaft_list_Results(s *capnp.Segment) (Raft_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_list_Results(st), err
}

func ReadRootRaft_list_Results(msg *capnp.Message) (Raft_list_Results, error) {
	root, err := msg.Root()
	return Raft_list_Results(root.Struct()), err
}

func (s Raft_list_Results) String() string {
	str, _ := text.Marshal(0xeb05cc390961a49a, capnp.Struct(s))
	return str
}

func (s Raft_list_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_list_Results) DecodeFromPtr(p capnp.Ptr) Raft_list_Results {
	return Raft_list_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_list_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_list_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_list_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_list_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_list_Results) Objects() (Item_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Item_List(p.List()), err
}

func (s Raft_list_Results) HasObjects() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_list_Results) SetObjects(v Item_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewObjects sets the objects field to a newly
// allocated Item_List, preferring placement in s's segment.
func (s Raft_list_Results) NewObjects(n int32) (Item_List, error) {
	l, err := NewItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Item_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Raft_list_Results_List is a list of Raft_list_Results.
type Raft_list_Results_List = capnp.StructList[Raft_list_Results]

// NewRaft_list_Results creates a new list of Raft_list_Results.
func NewRaft_list_Results_List(s *capnp.Segment, sz int32) (Raft_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_list_Results](l), err
}

// Raft_list_Results_Future is a wrapper for a Raft_list_Results promised by a client call.
type Raft_list_Results_Future struct{ *capnp.Future }

func (f Raft_list_Results_Future) Struct() (Raft_list_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_list_Results(p.Struct()), err
}

type Raft_members_Params capnp.Struct

// Raft_members_Params_TypeID is the unique identifier for the type Raft_members_Params.
const Raft_members_Params_TypeID = 0xf561891b2176587a

func NewRaft_members_Params(s *capnp.Segment) (Raft_members_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_members_Params(st), err
}

func NewRootRaft_members_Params(s *capnp.Segment) (Raft_members_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_members_Params(st), err
}

func ReadRootRaft_members_Params(msg *capnp.Message) (Raft_members_Params, error) {
	root, err := msg.Root()
	return Raft_members_Params(root.Struct()), err
}

func (s Raft_members_Params) String() string {
	str, _ := text.Marshal(0xf561891b2176587a, capnp.Struct(s))
	return str
}

func (s Raft_members_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_members_Params) DecodeFromPtr(p capnp.Ptr) Raft_members_Params {
	return Raft_members_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_members_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_members_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_members_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_members_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_members_Params_List is a list of Raft_members_Params.
type Raft_members_Params_List = capnp.StructList[Raft_members_Params]

// NewRaft_members_Params creates a new list of Raft_members_Params.
func NewRaft_members_Params_List(s *capnp.Segment, sz int32) (Raft_members_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_members_Params](l), err
}

// Raft_members_Params_Future is a wrapper for a Raft_members_Params promised by a client call.
type Raft_members_Params_Future struct{ *capnp.Future }

func (f Raft_members_Params_Future) Struct() (Raft_members_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_members_Params(p.Struct()), err
}

type Raft_members_Results capnp.Struct

// Raft_members_Results_TypeID is the unique identifier for the type Raft_members_Results.
const Raft_members_Results_TypeID = 0xbd2f697b2c16b9a9

func NewRaft_members_Results(s *capnp.Segment) (Raft_members_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(st), err
}

func NewRootRaft_members_Results(s *capnp.Segment) (Raft_members_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(st), err
}

func ReadRootRaft_members_Results(msg *capnp.Message) (Raft_members_Results, error) {
	root, err := msg.Root()
	return Raft_members_Results(root.Struct()), err
}

func (s Raft_members_Results) String() string {
	str, _ := text.Marshal(0xbd2f697b2c16b9a9, capnp.Struct(s))
	return str
}

func (s Raft_members_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_members_Results) DecodeFromPtr(p capnp.Ptr) Raft_members_Results {
	return Raft_members_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_members_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_members_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_members_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_members_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_members_Results) Members() (NodeInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NodeInfo_List(p.List()), err
}

func (s Raft_members_Results) HasMembers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_members_Results) SetMembers(v NodeInfo_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMembers sets the members field to a newly
// allocated NodeInfo_List, preferring placement in s's segment.
func (s Raft_members_Results) NewMembers(n int32) (NodeInfo_List, error) {
	l, err := NewNodeInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NodeInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Raft_members_Results_List is a list of Raft_members_Results.
type Raft_members_Results_List = capnp.StructList[Raft_members_Results]

// NewRaft_members_Results creates a new list of Raft_members_Results.
func NewRaft_members_Results_List(s *capnp.Segment, sz int32) (Raft_members_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_members_Results](l), err
}

// Raft_members_Results_Future is a wrapper for a Raft_members_Results promised by a client call.
type Raft_members_Results_Future struct{ *capnp.Future }

func (f Raft_members_Results_Future) Struct() (Raft_members_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_members_Results(p.Struct()), err
}

type Item capnp.Struct

// Item_TypeID is the unique identifier for the type Item.
const Item_TypeID = 0xae462da6618b7135

func NewItem(s *capnp.Segment) (Item, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Item(st), err
}

func NewRootItem(s *capnp.Segment) (Item, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Item(st), err
}

func ReadRootItem(msg *capnp.Message) (Item, error) {
	root, err := msg.Root()
	return Item(root.Struct()), err
}

func (s Item) String() string {
	str, _ := text.Marshal(0xae462da6618b7135, capnp.Struct(s))
	return str
}

func (s Item) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Item) DecodeFromPtr(p capnp.Ptr) Item {
	return Item(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Item) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Item) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Item) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Item) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Item) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Item) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Item) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Item) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Item) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Item) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// Item_List is a list of Item.
type Item_List = capnp.StructList[Item]

// NewItem creates a new list of Item.
func NewItem_List(s *capnp.Segment, sz int32) (Item_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Item](l), err
}

// Item_Future is a wrapper for a Item promised by a client call.
type Item_Future struct{ *capnp.Future }

func (f Item_Future) Struct() (Item, error) {
	p, err := f.Future.Ptr()
	return Item(p.Struct()), err
}

type NodeInfo capnp.Struct

// NodeInfo_TypeID is the unique identifier for the type NodeInfo.
const NodeInfo_TypeID = 0xf3dbf85049fe61f0

func NewNodeInfo(s *capnp.Segment) (NodeInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NodeInfo(st), err
}

func NewRootNodeInfo(s *capnp.Segment) (NodeInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NodeInfo(st), err
}

func ReadRootNodeInfo(msg *capnp.Message) (NodeInfo, error) {
	root, err := msg.Root()
	return NodeInfo(root.Struct()), err
}

func (s NodeInfo) String() string {
	str, _ := text.Marshal(0xf3dbf85049fe61f0, capnp.Struct(s))
	return str
}

func (s NodeInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NodeInfo) DecodeFromPtr(p capnp.Ptr) NodeInfo {
	return NodeInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NodeInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NodeInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NodeInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NodeInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NodeInfo) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s NodeInfo) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s NodeInfo) Chan() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NodeInfo) HasChan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NodeInfo) ChanBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NodeInfo) SetChan(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// NodeInfo_List is a list of NodeInfo.
type NodeInfo_List = capnp.StructList[NodeInfo]

// NewNodeInfo creates a new list of NodeInfo.
func NewNodeInfo_List(s *capnp.Segment, sz int32) (NodeInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NodeInfo](l), err
}

// NodeInfo_Future is a wrapper for a NodeInfo promised by a client call.
type NodeInfo_Future struct{ *capnp.Future }

func (f NodeInfo_Future) Struct() (NodeInfo, error) {
	p, err := f.Future.Ptr()
	return NodeInfo(p.Struct()), err
}

const schema_8dcfa60b52844164 = "x\xda\x9cTOh\x1cU\x1c\xfe}\xef\xcd\xec4$" +
	"\xe9\xee0\xa5TE\xd7\x84\x154\xba\xdaF\x05S\x09" +
	"\x99\x14+\xa4U\xd9\x09\x0a\xf6 8\xd9\xcc\xb6\xdb\xee" +
	"\xce\xac\xf3'5\x8a\xa8UP\xd1\xd2\xa3\xb6\xa8\x87\xaa" +
	"\x05\x0fJ\x83\x82z\xb0\xdezQQ\x0fB\xb5x)" +
	"\x9e\xdaCl\x8b\x98\x0a:\xf2\xa6;3o\x9b]P" +
	"o\xb3\xef\xf7{\xdf\xf7{\xdf\xef\xfbv\xeb.f*" +
	"\xdbF\x8f\x14\x88Y\x0f\xa9\x85\xf8\xbd\x83/\x14\x0e\\" +
	"\xd8\xfd6\xe9%\x10\xa9\xd0\x88\x8c*?G0\xb6\xf1" +
	"\x19B|\xefS\xaf\xdb'\xaa\x0f~L\xfa0\xe2\xc5" +
	"\xd9\x97\xe7\x87O|w\x98T&\xfa,~\xc8x\x8c" +
	"_\xfd:H\x88\x8f\\\xfe\xe4\xbah\xdf\xd0\xc9.V" +
	"\xd2\xf3\x11?O0V\x92\xfa/\x9f\x9d=S:\xbd" +
	"\xb6\"s\xdd\xa8\x08\xae1Ep}\xf8\xc5\xe6;\x9e" +
	"m\xde\xf5\xa5T\xbf{Va \x18;\x93\x86\xaf\xa7" +
	"\x9f,\x8dw>\xfd\x8a\xf4a\x9e\x0fC0\"\xe5\x90" +
	"\xb1\xac\x88\xfeHy\x05\x86\xa3jD\xf1K{\x9e{" +
	"\xf7\xd4\xea\xdai\x99\xeeaU\xd0Y\xaa@;\xb3\xbb" +
	">\xf6\xd6\xd3\xf5\xef\xe5z\xa4\xfeL0\x96\x93\xfa\xb1" +
	"\xf7\xed\xa1\xa9o\xd4\x0br\xfd\xa8*\x9e\xf3NR?" +
	"y\xfb\x1b\xa6\xf7\xf9\xd4E\xb9\xfe\xadz\x89`\xfc\x90" +
	"\xd4\x7f\xbd\xa9z\xff\xa97\x17\xbau1\x9dqQ=" +
	"GJ\xdc\xb8\xf9\xfc\x1f{\x8f{\x97\xe4\x8b?&\xc0" +
	"?%\x17\x7f\xb3\xff\x9e\xab\xad\x9d\xbdL\xd60d\xd1" +
	"\x93\xc6+\xeaq\x03\x05\xf1\xf5\x97*D}\xe6\xf1\xa5" +
	"\xb1\x1b^\xb3\x7f\x97X\xf6\x14\xfe$%^}u\xf3" +
	"\xa3\xb7\x1c[\xbd\"\xb3L\x17\x04\xcbla\x86\xaa\xb1" +
	"o7\xc2;\xebv\x87\xb9\x9d\xed\xf3\xe2\xbb\x13\x85\x95" +
	"y'\x88\xb4V\x18X\x0aW\x88\x14\x10\xe9\xa3\x93D" +
	"\xd6\x06\x0ek\x13C\xd9\xf1}\xcf\xc7\x081\x8c\x102" +
	"\x08\xb8\x9d\xeds\xa1\xd3\xa6\x1a`m\xc8n\xde6N" +
	"dU8\xac\xad\x0c:\xb0\x09\xe2\xb0*\xe0n\xe5\xb0" +
	"\xeea\xd0\x0e8\xcb\x18%\x86QBy\xc9nEN" +
	"\xfak\xfdt\xfb\xbd\xa6+\xc6+Fb<\x89d\xb2" +
	"KbJ$\xd3\xe2\xf0>\x0e\xeb\x01\x86\xb2\xeb-:" +
	"\x016\x12j\x1c(\xe5\xea\x12\xc4\xe1\x80'e\xbc\x81" +
	"\xe3.Vj\xb6\xaf\xd9\xed\x1eU\xc6sU\xb4v\xb0" +
	"w\xdd\xe0<\x05h;\xed\x05\xc7\x0f\x12i[a@" +
	"2\xc8\x8e.H\x85\xe1\xf9n\xdf\xc0A{\xd4\x16\xc8" +
	"\x89\xda[\xb8*Y\x1di\x04\xf5\x95\x09b\xfa\x07\x1a" +
	"\x90\xf9\x00\xa9_\xf5\xa3\x93\xc4\xf4\xc3\x1aX\x96H\xa4" +
	"\x96\xd4_\x14\xf7\"\x0d<\x8b\x07\xd2\xbf\x08\xbd9N" +
	"L\x7fB\x83\x92Y\x1biFtK\xdc\xdb\xa9A\xcd" +
	"\x0c\x894\xce\xfa\xd4\x0ebzU+\x8a\x15\x9a(\xb7" +
	"\x1c{\xc91Q\x14\xca\x9a\xd0:Qh\xa2\xd8j\x06" +
	"\xa1\x99\x89`\xa2\x86A\x1e\xe8\xb3\x8b]D\xd6\x08\x87" +
	"\xb5\x85!\x16\xdb\x9es\x1b\x1e\x11]\xa3a\xa9\xdfz" +
	"\x85\xe9k\xb6o\xf3^\xc4\x89|\xbb\xc5f\xe8\xb4Q" +
	"\xca\xff\x09\x07A\x89'\xe4\x0e\x1d\xb0eoa\xbfS" +
	"\x0f\xa5-\xcb\xb0\x1b\xfb\xc2\x0a\xb9*\xf3N9\x88\xfe" +
	"s0{g\xeb*7\xc0\xe3\xfd&\xffw\xd1\x7fD" +
	"H\xae\xb9\x0d\xef\x9a\xf8_\x9f\xc7?K\xffD\x9e~" +
	"\xde\\\xc4\x101\x0c\x11\x8a\xf5}\xb6;x\xfa4B" +
	"3bS\xfd\x1epU\xa3\x9a]\xf4\xff\xaf3\xfe\x09" +
	"\x00\x00\xff\xff\xb7k\xd60"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8dcfa60b52844164,
		Nodes: []uint64{
			0x9c4beb6b068077a3,
			0xae462da6618b7135,
			0xb009687519b3f38f,
			0xb1f8c610d8dbb7dd,
			0xbd2f697b2c16b9a9,
			0xbfb4702210603dcb,
			0xc6f8efbe9e7d5983,
			0xd063789821634bd8,
			0xeb05cc390961a49a,
			0xf139b86f408c2bb0,
			0xf16297be3b2d1ee4,
			0xf26fa267f7ea2066,
			0xf3dbf85049fe61f0,
			0xf561891b2176587a,
			0xf9ef9a25541688ef,
		},
		Compressed: true,
	})
}
