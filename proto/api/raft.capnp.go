// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Raft capnp.Client

// Raft_TypeID is the unique identifier for the type Raft.
const Raft_TypeID = 0xbfb4702210603dcb

func (c Raft) Join(ctx context.Context, params func(Raft_join_Params) error) (Raft_join_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      0,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_join_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_join_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Leave(ctx context.Context, params func(Raft_leave_Params) error) (Raft_leave_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      1,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "leave",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_leave_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_leave_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Send(ctx context.Context, params func(Raft_send_Params) error) (Raft_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      2,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_send_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Put(ctx context.Context, params func(Raft_put_Params) error) (Raft_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      3,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_put_Results_Future{Future: ans.Future()}, release

}

func (c Raft) List(ctx context.Context, params func(Raft_list_Params) error) (Raft_list_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      4,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "list",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_list_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_list_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Members(ctx context.Context, params func(Raft_members_Params) error) (Raft_members_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      5,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "members",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_members_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_members_Results_Future{Future: ans.Future()}, release

}

func (c Raft) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Raft) String() string {
	return "Raft(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Raft) AddRef() Raft {
	return Raft(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Raft) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Raft) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Raft) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Raft) DecodeFromPtr(p capnp.Ptr) Raft {
	return Raft(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Raft) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Raft) IsSame(other Raft) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Raft) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Raft) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Raft_Server is a Raft with a local implementation.
type Raft_Server interface {
	Join(context.Context, Raft_join) error

	Leave(context.Context, Raft_leave) error

	Send(context.Context, Raft_send) error

	Put(context.Context, Raft_put) error

	List(context.Context, Raft_list) error

	Members(context.Context, Raft_members) error
}

// Raft_NewServer creates a new Server from an implementation of Raft_Server.
func Raft_NewServer(s Raft_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Raft_Methods(nil, s), s, c)
}

// Raft_ServerToClient creates a new Client from an implementation of Raft_Server.
// The caller is responsible for calling Release on the returned Client.
func Raft_ServerToClient(s Raft_Server) Raft {
	return Raft(capnp.NewClient(Raft_NewServer(s)))
}

// Raft_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Raft_Methods(methods []server.Method, s Raft_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      0,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, Raft_join{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      1,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "leave",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Leave(ctx, Raft_leave{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      2,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, Raft_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      3,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, Raft_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      4,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "list",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.List(ctx, Raft_list{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      5,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "members",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Members(ctx, Raft_members{call})
		},
	})

	return methods
}

// Raft_join holds the state for a server call to Raft.join.
// See server.Call for documentation.
type Raft_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_join) Args() Raft_join_Params {
	return Raft_join_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_join) AllocResults() (Raft_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(r), err
}

// Raft_leave holds the state for a server call to Raft.leave.
// See server.Call for documentation.
type Raft_leave struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_leave) Args() Raft_leave_Params {
	return Raft_leave_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_leave) AllocResults() (Raft_leave_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(r), err
}

// Raft_send holds the state for a server call to Raft.send.
// See server.Call for documentation.
type Raft_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_send) Args() Raft_send_Params {
	return Raft_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_send) AllocResults() (Raft_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(r), err
}

// Raft_put holds the state for a server call to Raft.put.
// See server.Call for documentation.
type Raft_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_put) Args() Raft_put_Params {
	return Raft_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_put) AllocResults() (Raft_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(r), err
}

// Raft_list holds the state for a server call to Raft.list.
// See server.Call for documentation.
type Raft_list struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_list) Args() Raft_list_Params {
	return Raft_list_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_list) AllocResults() (Raft_list_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_list_Results(r), err
}

// Raft_members holds the state for a server call to Raft.members.
// See server.Call for documentation.
type Raft_members struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_members) Args() Raft_members_Params {
	return Raft_members_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_members) AllocResults() (Raft_members_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(r), err
}

// Raft_List is a list of Raft.
type Raft_List = capnp.CapList[Raft]

// NewRaft creates a new list of Raft.
func NewRaft_List(s *capnp.Segment, sz int32) (Raft_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Raft](l), err
}

type Raft_join_Params capnp.Struct

// Raft_join_Params_TypeID is the unique identifier for the type Raft_join_Params.
const Raft_join_Params_TypeID = 0xc6f8efbe9e7d5983

func NewRaft_join_Params(s *capnp.Segment) (Raft_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_join_Params(st), err
}

func NewRootRaft_join_Params(s *capnp.Segment) (Raft_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_join_Params(st), err
}

func ReadRootRaft_join_Params(msg *capnp.Message) (Raft_join_Params, error) {
	root, err := msg.Root()
	return Raft_join_Params(root.Struct()), err
}

func (s Raft_join_Params) String() string {
	str, _ := text.Marshal(0xc6f8efbe9e7d5983, capnp.Struct(s))
	return str
}

func (s Raft_join_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_join_Params) DecodeFromPtr(p capnp.Ptr) Raft_join_Params {
	return Raft_join_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_join_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_join_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_join_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_join_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_join_Params) NodeInfo() (NodeInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NodeInfo(p.Struct()), err
}

func (s Raft_join_Params) HasNodeInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_join_Params) SetNodeInfo(v NodeInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNodeInfo sets the nodeInfo field to a newly
// allocated NodeInfo struct, preferring placement in s's segment.
func (s Raft_join_Params) NewNodeInfo() (NodeInfo, error) {
	ss, err := NewNodeInfo(capnp.Struct(s).Segment())
	if err != nil {
		return NodeInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Raft_join_Params_List is a list of Raft_join_Params.
type Raft_join_Params_List = capnp.StructList[Raft_join_Params]

// NewRaft_join_Params creates a new list of Raft_join_Params.
func NewRaft_join_Params_List(s *capnp.Segment, sz int32) (Raft_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_join_Params](l), err
}

// Raft_join_Params_Future is a wrapper for a Raft_join_Params promised by a client call.
type Raft_join_Params_Future struct{ *capnp.Future }

func (f Raft_join_Params_Future) Struct() (Raft_join_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_join_Params(p.Struct()), err
}
func (p Raft_join_Params_Future) NodeInfo() NodeInfo_Future {
	return NodeInfo_Future{Future: p.Future.Field(0, nil)}
}

type Raft_join_Results capnp.Struct

// Raft_join_Results_TypeID is the unique identifier for the type Raft_join_Results.
const Raft_join_Results_TypeID = 0xb009687519b3f38f

func NewRaft_join_Results(s *capnp.Segment) (Raft_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(st), err
}

func NewRootRaft_join_Results(s *capnp.Segment) (Raft_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_join_Results(st), err
}

func ReadRootRaft_join_Results(msg *capnp.Message) (Raft_join_Results, error) {
	root, err := msg.Root()
	return Raft_join_Results(root.Struct()), err
}

func (s Raft_join_Results) String() string {
	str, _ := text.Marshal(0xb009687519b3f38f, capnp.Struct(s))
	return str
}

func (s Raft_join_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_join_Results) DecodeFromPtr(p capnp.Ptr) Raft_join_Results {
	return Raft_join_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_join_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_join_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_join_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_join_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_join_Results) Nodes() (NodeInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NodeInfo_List(p.List()), err
}

func (s Raft_join_Results) HasNodes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_join_Results) SetNodes(v NodeInfo_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewNodes sets the nodes field to a newly
// allocated NodeInfo_List, preferring placement in s's segment.
func (s Raft_join_Results) NewNodes(n int32) (NodeInfo_List, error) {
	l, err := NewNodeInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NodeInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Raft_join_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Raft_join_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Raft_join_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Raft_join_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Raft_join_Results_List is a list of Raft_join_Results.
type Raft_join_Results_List = capnp.StructList[Raft_join_Results]

// NewRaft_join_Results creates a new list of Raft_join_Results.
func NewRaft_join_Results_List(s *capnp.Segment, sz int32) (Raft_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Raft_join_Results](l), err
}

// Raft_join_Results_Future is a wrapper for a Raft_join_Results promised by a client call.
type Raft_join_Results_Future struct{ *capnp.Future }

func (f Raft_join_Results_Future) Struct() (Raft_join_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_join_Results(p.Struct()), err
}

type Raft_leave_Params capnp.Struct

// Raft_leave_Params_TypeID is the unique identifier for the type Raft_leave_Params.
const Raft_leave_Params_TypeID = 0xf9ef9a25541688ef

func NewRaft_leave_Params(s *capnp.Segment) (Raft_leave_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Params(st), err
}

func NewRootRaft_leave_Params(s *capnp.Segment) (Raft_leave_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Params(st), err
}

func ReadRootRaft_leave_Params(msg *capnp.Message) (Raft_leave_Params, error) {
	root, err := msg.Root()
	return Raft_leave_Params(root.Struct()), err
}

func (s Raft_leave_Params) String() string {
	str, _ := text.Marshal(0xf9ef9a25541688ef, capnp.Struct(s))
	return str
}

func (s Raft_leave_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_leave_Params) DecodeFromPtr(p capnp.Ptr) Raft_leave_Params {
	return Raft_leave_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_leave_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_leave_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_leave_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_leave_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_leave_Params) NodeInfo() (NodeInfo, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NodeInfo(p.Struct()), err
}

func (s Raft_leave_Params) HasNodeInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_leave_Params) SetNodeInfo(v NodeInfo) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNodeInfo sets the nodeInfo field to a newly
// allocated NodeInfo struct, preferring placement in s's segment.
func (s Raft_leave_Params) NewNodeInfo() (NodeInfo, error) {
	ss, err := NewNodeInfo(capnp.Struct(s).Segment())
	if err != nil {
		return NodeInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Raft_leave_Params_List is a list of Raft_leave_Params.
type Raft_leave_Params_List = capnp.StructList[Raft_leave_Params]

// NewRaft_leave_Params creates a new list of Raft_leave_Params.
func NewRaft_leave_Params_List(s *capnp.Segment, sz int32) (Raft_leave_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_leave_Params](l), err
}

// Raft_leave_Params_Future is a wrapper for a Raft_leave_Params promised by a client call.
type Raft_leave_Params_Future struct{ *capnp.Future }

func (f Raft_leave_Params_Future) Struct() (Raft_leave_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_leave_Params(p.Struct()), err
}
func (p Raft_leave_Params_Future) NodeInfo() NodeInfo_Future {
	return NodeInfo_Future{Future: p.Future.Field(0, nil)}
}

type Raft_leave_Results capnp.Struct

// Raft_leave_Results_TypeID is the unique identifier for the type Raft_leave_Results.
const Raft_leave_Results_TypeID = 0xf139b86f408c2bb0

func NewRaft_leave_Results(s *capnp.Segment) (Raft_leave_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(st), err
}

func NewRootRaft_leave_Results(s *capnp.Segment) (Raft_leave_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_leave_Results(st), err
}

func ReadRootRaft_leave_Results(msg *capnp.Message) (Raft_leave_Results, error) {
	root, err := msg.Root()
	return Raft_leave_Results(root.Struct()), err
}

func (s Raft_leave_Results) String() string {
	str, _ := text.Marshal(0xf139b86f408c2bb0, capnp.Struct(s))
	return str
}

func (s Raft_leave_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_leave_Results) DecodeFromPtr(p capnp.Ptr) Raft_leave_Results {
	return Raft_leave_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_leave_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_leave_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_leave_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_leave_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_leave_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_leave_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_leave_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_leave_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_leave_Results_List is a list of Raft_leave_Results.
type Raft_leave_Results_List = capnp.StructList[Raft_leave_Results]

// NewRaft_leave_Results creates a new list of Raft_leave_Results.
func NewRaft_leave_Results_List(s *capnp.Segment, sz int32) (Raft_leave_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_leave_Results](l), err
}

// Raft_leave_Results_Future is a wrapper for a Raft_leave_Results promised by a client call.
type Raft_leave_Results_Future struct{ *capnp.Future }

func (f Raft_leave_Results_Future) Struct() (Raft_leave_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_leave_Results(p.Struct()), err
}

type Raft_send_Params capnp.Struct

// Raft_send_Params_TypeID is the unique identifier for the type Raft_send_Params.
const Raft_send_Params_TypeID = 0xb1f8c610d8dbb7dd

func NewRaft_send_Params(s *capnp.Segment) (Raft_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Params(st), err
}

func NewRootRaft_send_Params(s *capnp.Segment) (Raft_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Params(st), err
}

func ReadRootRaft_send_Params(msg *capnp.Message) (Raft_send_Params, error) {
	root, err := msg.Root()
	return Raft_send_Params(root.Struct()), err
}

func (s Raft_send_Params) String() string {
	str, _ := text.Marshal(0xb1f8c610d8dbb7dd, capnp.Struct(s))
	return str
}

func (s Raft_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_send_Params) DecodeFromPtr(p capnp.Ptr) Raft_send_Params {
	return Raft_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_send_Params) Message() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Raft_send_Params) HasMessage() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_send_Params) SetMessage(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Raft_send_Params_List is a list of Raft_send_Params.
type Raft_send_Params_List = capnp.StructList[Raft_send_Params]

// NewRaft_send_Params creates a new list of Raft_send_Params.
func NewRaft_send_Params_List(s *capnp.Segment, sz int32) (Raft_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_send_Params](l), err
}

// Raft_send_Params_Future is a wrapper for a Raft_send_Params promised by a client call.
type Raft_send_Params_Future struct{ *capnp.Future }

func (f Raft_send_Params_Future) Struct() (Raft_send_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_send_Params(p.Struct()), err
}

type Raft_send_Results capnp.Struct

// Raft_send_Results_TypeID is the unique identifier for the type Raft_send_Results.
const Raft_send_Results_TypeID = 0xf26fa267f7ea2066

func NewRaft_send_Results(s *capnp.Segment) (Raft_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(st), err
}

func NewRootRaft_send_Results(s *capnp.Segment) (Raft_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(st), err
}

func ReadRootRaft_send_Results(msg *capnp.Message) (Raft_send_Results, error) {
	root, err := msg.Root()
	return Raft_send_Results(root.Struct()), err
}

func (s Raft_send_Results) String() string {
	str, _ := text.Marshal(0xf26fa267f7ea2066, capnp.Struct(s))
	return str
}

func (s Raft_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_send_Results) DecodeFromPtr(p capnp.Ptr) Raft_send_Results {
	return Raft_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_send_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_send_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_send_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_send_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_send_Results_List is a list of Raft_send_Results.
type Raft_send_Results_List = capnp.StructList[Raft_send_Results]

// NewRaft_send_Results creates a new list of Raft_send_Results.
func NewRaft_send_Results_List(s *capnp.Segment, sz int32) (Raft_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_send_Results](l), err
}

// Raft_send_Results_Future is a wrapper for a Raft_send_Results promised by a client call.
type Raft_send_Results_Future struct{ *capnp.Future }

func (f Raft_send_Results_Future) Struct() (Raft_send_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_send_Results(p.Struct()), err
}

type Raft_put_Params capnp.Struct

// Raft_put_Params_TypeID is the unique identifier for the type Raft_put_Params.
const Raft_put_Params_TypeID = 0xd063789821634bd8

func NewRaft_put_Params(s *capnp.Segment) (Raft_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Params(st), err
}

func NewRootRaft_put_Params(s *capnp.Segment) (Raft_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Params(st), err
}

func ReadRootRaft_put_Params(msg *capnp.Message) (Raft_put_Params, error) {
	root, err := msg.Root()
	return Raft_put_Params(root.Struct()), err
}

func (s Raft_put_Params) String() string {
	str, _ := text.Marshal(0xd063789821634bd8, capnp.Struct(s))
	return str
}

func (s Raft_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_put_Params) DecodeFromPtr(p capnp.Ptr) Raft_put_Params {
	return Raft_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_put_Params) Item() (Item, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Item(p.Struct()), err
}

func (s Raft_put_Params) HasItem() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_put_Params) SetItem(v Item) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewItem sets the item field to a newly
// allocated Item struct, preferring placement in s's segment.
func (s Raft_put_Params) NewItem() (Item, error) {
	ss, err := NewItem(capnp.Struct(s).Segment())
	if err != nil {
		return Item{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Raft_put_Params_List is a list of Raft_put_Params.
type Raft_put_Params_List = capnp.StructList[Raft_put_Params]

// NewRaft_put_Params creates a new list of Raft_put_Params.
func NewRaft_put_Params_List(s *capnp.Segment, sz int32) (Raft_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_put_Params](l), err
}

// Raft_put_Params_Future is a wrapper for a Raft_put_Params promised by a client call.
type Raft_put_Params_Future struct{ *capnp.Future }

func (f Raft_put_Params_Future) Struct() (Raft_put_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_put_Params(p.Struct()), err
}
func (p Raft_put_Params_Future) Item() Item_Future {
	return Item_Future{Future: p.Future.Field(0, nil)}
}

type Raft_put_Results capnp.Struct

// Raft_put_Results_TypeID is the unique identifier for the type Raft_put_Results.
const Raft_put_Results_TypeID = 0x9c4beb6b068077a3

func NewRaft_put_Results(s *capnp.Segment) (Raft_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(st), err
}

func NewRootRaft_put_Results(s *capnp.Segment) (Raft_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(st), err
}

func ReadRootRaft_put_Results(msg *capnp.Message) (Raft_put_Results, error) {
	root, err := msg.Root()
	return Raft_put_Results(root.Struct()), err
}

func (s Raft_put_Results) String() string {
	str, _ := text.Marshal(0x9c4beb6b068077a3, capnp.Struct(s))
	return str
}

func (s Raft_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_put_Results) DecodeFromPtr(p capnp.Ptr) Raft_put_Results {
	return Raft_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_put_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_put_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_put_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_put_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_put_Results_List is a list of Raft_put_Results.
type Raft_put_Results_List = capnp.StructList[Raft_put_Results]

// NewRaft_put_Results creates a new list of Raft_put_Results.
func NewRaft_put_Results_List(s *capnp.Segment, sz int32) (Raft_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_put_Results](l), err
}

// Raft_put_Results_Future is a wrapper for a Raft_put_Results promised by a client call.
type Raft_put_Results_Future struct{ *capnp.Future }

func (f Raft_put_Results_Future) Struct() (Raft_put_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_put_Results(p.Struct()), err
}

type Raft_list_Params capnp.Struct

// Raft_list_Params_TypeID is the unique identifier for the type Raft_list_Params.
const Raft_list_Params_TypeID = 0xf16297be3b2d1ee4

func NewRaft_list_Params(s *capnp.Segment) (Raft_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_list_Params(st), err
}

func NewRootRaft_list_Params(s *capnp.Segment) (Raft_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_list_Params(st), err
}

func ReadRootRaft_list_Params(msg *capnp.Message) (Raft_list_Params, error) {
	root, err := msg.Root()
	return Raft_list_Params(root.Struct()), err
}

func (s Raft_list_Params) String() string {
	str, _ := text.Marshal(0xf16297be3b2d1ee4, capnp.Struct(s))
	return str
}

func (s Raft_list_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_list_Params) DecodeFromPtr(p capnp.Ptr) Raft_list_Params {
	return Raft_list_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_list_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_list_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_list_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_list_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_list_Params_List is a list of Raft_list_Params.
type Raft_list_Params_List = capnp.StructList[Raft_list_Params]

// NewRaft_list_Params creates a new list of Raft_list_Params.
func NewRaft_list_Params_List(s *capnp.Segment, sz int32) (Raft_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_list_Params](l), err
}

// Raft_list_Params_Future is a wrapper for a Raft_list_Params promised by a client call.
type Raft_list_Params_Future struct{ *capnp.Future }

func (f Raft_list_Params_Future) Struct() (Raft_list_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_list_Params(p.Struct()), err
}

type Raft_list_Results capnp.Struct

// Raft_list_Results_TypeID is the unique identifier for the type Raft_list_Results.
const Raft_list_Results_TypeID = 0xeb05cc390961a49a

func NewRaft_list_Results(s *capnp.Segment) (Raft_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_list_Results(st), err
}

func NewRootRaft_list_Results(s *capnp.Segment) (Raft_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_list_Results(st), err
}

func ReadRootRaft_list_Results(msg *capnp.Message) (Raft_list_Results, error) {
	root, err := msg.Root()
	return Raft_list_Results(root.Struct()), err
}

func (s Raft_list_Results) String() string {
	str, _ := text.Marshal(0xeb05cc390961a49a, capnp.Struct(s))
	return str
}

func (s Raft_list_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_list_Results) DecodeFromPtr(p capnp.Ptr) Raft_list_Results {
	return Raft_list_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_list_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_list_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_list_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_list_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_list_Results) Objects() (Item_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Item_List(p.List()), err
}

func (s Raft_list_Results) HasObjects() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_list_Results) SetObjects(v Item_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewObjects sets the objects field to a newly
// allocated Item_List, preferring placement in s's segment.
func (s Raft_list_Results) NewObjects(n int32) (Item_List, error) {
	l, err := NewItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Item_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Raft_list_Results_List is a list of Raft_list_Results.
type Raft_list_Results_List = capnp.StructList[Raft_list_Results]

// NewRaft_list_Results creates a new list of Raft_list_Results.
func NewRaft_list_Results_List(s *capnp.Segment, sz int32) (Raft_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_list_Results](l), err
}

// Raft_list_Results_Future is a wrapper for a Raft_list_Results promised by a client call.
type Raft_list_Results_Future struct{ *capnp.Future }

func (f Raft_list_Results_Future) Struct() (Raft_list_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_list_Results(p.Struct()), err
}

type Raft_members_Params capnp.Struct

// Raft_members_Params_TypeID is the unique identifier for the type Raft_members_Params.
const Raft_members_Params_TypeID = 0xf561891b2176587a

func NewRaft_members_Params(s *capnp.Segment) (Raft_members_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_members_Params(st), err
}

func NewRootRaft_members_Params(s *capnp.Segment) (Raft_members_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_members_Params(st), err
}

func ReadRootRaft_members_Params(msg *capnp.Message) (Raft_members_Params, error) {
	root, err := msg.Root()
	return Raft_members_Params(root.Struct()), err
}

func (s Raft_members_Params) String() string {
	str, _ := text.Marshal(0xf561891b2176587a, capnp.Struct(s))
	return str
}

func (s Raft_members_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_members_Params) DecodeFromPtr(p capnp.Ptr) Raft_members_Params {
	return Raft_members_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_members_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_members_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_members_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_members_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_members_Params_List is a list of Raft_members_Params.
type Raft_members_Params_List = capnp.StructList[Raft_members_Params]

// NewRaft_members_Params creates a new list of Raft_members_Params.
func NewRaft_members_Params_List(s *capnp.Segment, sz int32) (Raft_members_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_members_Params](l), err
}

// Raft_members_Params_Future is a wrapper for a Raft_members_Params promised by a client call.
type Raft_members_Params_Future struct{ *capnp.Future }

func (f Raft_members_Params_Future) Struct() (Raft_members_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_members_Params(p.Struct()), err
}

type Raft_members_Results capnp.Struct

// Raft_members_Results_TypeID is the unique identifier for the type Raft_members_Results.
const Raft_members_Results_TypeID = 0xbd2f697b2c16b9a9

func NewRaft_members_Results(s *capnp.Segment) (Raft_members_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(st), err
}

func NewRootRaft_members_Results(s *capnp.Segment) (Raft_members_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(st), err
}

func ReadRootRaft_members_Results(msg *capnp.Message) (Raft_members_Results, error) {
	root, err := msg.Root()
	return Raft_members_Results(root.Struct()), err
}

func (s Raft_members_Results) String() string {
	str, _ := text.Marshal(0xbd2f697b2c16b9a9, capnp.Struct(s))
	return str
}

func (s Raft_members_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_members_Results) DecodeFromPtr(p capnp.Ptr) Raft_members_Results {
	return Raft_members_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_members_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_members_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_members_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_members_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_members_Results) Members() (NodeInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NodeInfo_List(p.List()), err
}

func (s Raft_members_Results) HasMembers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_members_Results) SetMembers(v NodeInfo_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMembers sets the members field to a newly
// allocated NodeInfo_List, preferring placement in s's segment.
func (s Raft_members_Results) NewMembers(n int32) (NodeInfo_List, error) {
	l, err := NewNodeInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NodeInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Raft_members_Results_List is a list of Raft_members_Results.
type Raft_members_Results_List = capnp.StructList[Raft_members_Results]

// NewRaft_members_Results creates a new list of Raft_members_Results.
func NewRaft_members_Results_List(s *capnp.Segment, sz int32) (Raft_members_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_members_Results](l), err
}

// Raft_members_Results_Future is a wrapper for a Raft_members_Results promised by a client call.
type Raft_members_Results_Future struct{ *capnp.Future }

func (f Raft_members_Results_Future) Struct() (Raft_members_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_members_Results(p.Struct()), err
}

type Item capnp.Struct

// Item_TypeID is the unique identifier for the type Item.
const Item_TypeID = 0xae462da6618b7135

func NewItem(s *capnp.Segment) (Item, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Item(st), err
}

func NewRootItem(s *capnp.Segment) (Item, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Item(st), err
}

func ReadRootItem(msg *capnp.Message) (Item, error) {
	root, err := msg.Root()
	return Item(root.Struct()), err
}

func (s Item) String() string {
	str, _ := text.Marshal(0xae462da6618b7135, capnp.Struct(s))
	return str
}

func (s Item) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Item) DecodeFromPtr(p capnp.Ptr) Item {
	return Item(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Item) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Item) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Item) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Item) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Item) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Item) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Item) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Item) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Item) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Item) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// Item_List is a list of Item.
type Item_List = capnp.StructList[Item]

// NewItem creates a new list of Item.
func NewItem_List(s *capnp.Segment, sz int32) (Item_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Item](l), err
}

// Item_Future is a wrapper for a Item promised by a client call.
type Item_Future struct{ *capnp.Future }

func (f Item_Future) Struct() (Item, error) {
	p, err := f.Future.Ptr()
	return Item(p.Struct()), err
}

type NodeInfo capnp.Struct

// NodeInfo_TypeID is the unique identifier for the type NodeInfo.
const NodeInfo_TypeID = 0xf3dbf85049fe61f0

func NewNodeInfo(s *capnp.Segment) (NodeInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NodeInfo(st), err
}

func NewRootNodeInfo(s *capnp.Segment) (NodeInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NodeInfo(st), err
}

func ReadRootNodeInfo(msg *capnp.Message) (NodeInfo, error) {
	root, err := msg.Root()
	return NodeInfo(root.Struct()), err
}

func (s NodeInfo) String() string {
	str, _ := text.Marshal(0xf3dbf85049fe61f0, capnp.Struct(s))
	return str
}

func (s NodeInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NodeInfo) DecodeFromPtr(p capnp.Ptr) NodeInfo {
	return NodeInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NodeInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NodeInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NodeInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NodeInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NodeInfo) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s NodeInfo) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s NodeInfo) Chan() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NodeInfo) HasChan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NodeInfo) ChanBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NodeInfo) SetChan(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// NodeInfo_List is a list of NodeInfo.
type NodeInfo_List = capnp.StructList[NodeInfo]

// NewNodeInfo creates a new list of NodeInfo.
func NewNodeInfo_List(s *capnp.Segment, sz int32) (NodeInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NodeInfo](l), err
}

// NodeInfo_Future is a wrapper for a NodeInfo promised by a client call.
type NodeInfo_Future struct{ *capnp.Future }

func (f NodeInfo_Future) Struct() (NodeInfo, error) {
	p, err := f.Future.Ptr()
	return NodeInfo(p.Struct()), err
}

const schema_8dcfa60b52844164 = "x\xda\x9cT]h\x1cU\x14>\xdf\xbd3;\x0dI" +
	"\xba;L)U\xd15a\x05\x8d\xae\xb6Q\xc1TB" +
	"&\xc5\x0aiUv\x82\x82}\x10\x9cl\xee\xb6\xdb\xee" +
	"\xce\xac\xf3\x93\x1aE\xd4*\xa8h\xe9\xa3\xb6\xa8\x0fU" +
	"\x0b>(\x0d\x0a\xea\x83\xf5\xad/*\xea\x83P-\xbe" +
	"\x14\x9f\xda\x87\xd8\x161\x15t\xe4Nw~\xb6\xd9\x05" +
	"\xf5m\xe6\x9es\xbf\xef\xdc\xef|\xe7l\xdd\xc5Le" +
	"\xdb\xe8\x91\x021\xeb!\xb5\x10\xbdw\xf0\x85\xc2\x81\x0b" +
	"\xbb\xdf&\xbd\x04\"\x15\x1a\x91Q\xe5\xe7\x08\xc66>" +
	"C\x88\xee}\xeau\xfbD\xf5\xc1\x8fI\x1fF\xb48" +
	"\xfb\xf2\xfc\xf0\x89\xef\x0e\x93\xcad\x9e\xc5\x0f\x19\x8f\xf1" +
	"\xab_\x07\x09\xd1\x91\xcb\x9f\\\x17\xee\x1b:\xd9\xc5\x8a" +
	"s>\xe2\xe7\x09\xc6J\x1c\xff\xe5\xb3\xb3gJ\xa7\xd7" +
	"V\xf2\\7*\x92kL\x91\\\x1f~\xb1\xf9\x8eg" +
	"\x9bw}\x99\x8b\xdf=\xab0\x10\x8c\x9dq\xc2\xd7\xd3" +
	"O\x96\xc6;\x9f~E\xfa0\xcf\x8a!\x18\xa1r\xc8" +
	"XVd~\xa8\xbc\x02C\xa8\x1aQ\xf4\xd2\x9e\xe7\xde" +
	"=\xb5\xbav:O\xf7\xb0*\xe9,U\xa2\x9d\xd9]" +
	"\x1f{\xeb\xe9\xfa\xf7\xf9x\xa8\xfeL0\x96\xe3\xf8\xb1" +
	"\xf7\xed\xa1\xa9o\xd4\x0b\xf9\xf8QU>\xe7\x9d8~" +
	"\xf2\xf67L\xf7\xf3\xa9\x8b\xf9\xf8\xb7\xea%\x82\xf1C" +
	"\x1c\xff\xf5\xa6\xea\xfd\xa7\xde\\\xe8\xc6eu\xc6E\xf5" +
	"\x1c)Q\xe3\xe6\xf3\x7f\xec=\xee^\xca_\xfc1\x06" +
	"\xfe)\xbe\xf8\x9b\xfd\xf7\\m\xed\xece\xb2\x86\x91\x17" +
	"=N\xbc\xa2\x1e7P\x90_\x7f\xa9R\xd4g\x1e_" +
	"\x1a\xbb\xe15\xfb\xf7\x1c\xcb\x9e\xc2\x9f\xa4D\xab\xafn" +
	"~\xf4\x96c\xabW\xf2,\xd3\x05\xc92[\x98\xa1j" +
	"\xe4\xd9\x8d\xe0\xce\xba\xddaNg\xfb\xbc\xfc\xee\x84A" +
	"e^\xf8\xa1\xd6\x0a|K\xe1\x0a\x91\x02\"}t\x92" +
	"\xc8\xda\xc0amb(\x0b\xcfs=\x8c\x10\xc3\x08!" +
	"\x85\x80\xd3\xd9>\x17\x886\xd5\x00kCz\xf3\xb6q" +
	"\"\xab\xc2ame\xd0\x81M\x90\x87U\x09w+\x87" +
	"u\x0f\x83v@,c\x94\x18F\x09\xe5%\xbb\x15\x8a" +
	"\xe4o}u\xfb\xdd\xa6#\xcb+\x86\xb2\xbc\x1c\xc9d" +
	"\x97\xc4\xcc\x91L\xcb\xc3\xfb8\xac\x07\x18\xca\x8e\xbb(" +
	"|l$\xd48P\xca\xd4%\xc8\xc3\x01OJy}" +
	"\xe1,Vj\xb6\xa7\xd9\xed\x1eUvd\xaa<\xdf\x16" +
	"\xbeo\xef]_<O@\xda\xa2\xbd <?\x96\xb7" +
	"\x15\xf8\xd4\x0f\xa8\x12\x03\xc5y\x03\x8b\xedQ\\\"\xc7" +
	"\x8ao\xe1j\xce\xeeH\xc6P_\x99 \xa6\x7f\xa0\x01" +
	"\xa9\x17\x90xV?:IL?\xac\x81\xa5S\x89\xc4" +
	"\x96\xfa\x8b\xf2^\xa8\x81\xa7#\x82dM\xe8\xcdqb" +
	"\xfa\x13\x1a\x94\xd4\xdeH\xe6D\xb7\xe4\xbd\x9d\x1a\xd4\xd4" +
	"\x94HFZ\x9f\xdaAL\xafjE\xd9F\x13\xe5\x96" +
	"\xb0\x97\x84\x89\xa2T\xd7\x84\xd6\x09\x03\x13\xc5V\xd3\x0f" +
	"\xccT\x04\x135\x0c\xf2A\x9f~\xec\"\xb2F8\xac" +
	"-\x0c\x91\xec\xf8\x9c\xd3p\x89\xe8\x1a\x0dK\xfdZ," +
	"\x8d_\xb3=\x9b\xf7\"Nd\x1d.6\x03\xd1F)" +
	"\xdb\x86\x83\xa0\xe4\x132\x97\x0e\xe8\xb2\xbb\xb0_\xd4\x83" +
	"\\\x97\xf3\xb0\x1b\xfb\xc2J\xb9*\xf3\xa2\xec\x87\xffy" +
	"8{k\xeb*7\xc0\xe7\xfd*\xffw\xe3\xff\x88\x94" +
	"\\s\x1a\xee5+\xe0\xfal\x05\xa4\x1b`\"\xdb\x00" +
	"\xbc\xb9\x88!b\x18\"\x14\xeb\xfblgp\xf5\xc9\x08" +
	"\xcd\xc8N\xf5{\xc0U\x8djv\xd1\xfb\xbf\xce\xf8'" +
	"\x00\x00\xff\xff3]\xd8f"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8dcfa60b52844164,
		Nodes: []uint64{
			0x9c4beb6b068077a3,
			0xae462da6618b7135,
			0xb009687519b3f38f,
			0xb1f8c610d8dbb7dd,
			0xbd2f697b2c16b9a9,
			0xbfb4702210603dcb,
			0xc6f8efbe9e7d5983,
			0xd063789821634bd8,
			0xeb05cc390961a49a,
			0xf139b86f408c2bb0,
			0xf16297be3b2d1ee4,
			0xf26fa267f7ea2066,
			0xf3dbf85049fe61f0,
			0xf561891b2176587a,
			0xf9ef9a25541688ef,
		},
		Compressed: true,
	})
}
