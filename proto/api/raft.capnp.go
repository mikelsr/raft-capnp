// Code generated by capnpc-go. DO NOT EDIT.

package api

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Raft capnp.Client

// Raft_TypeID is the unique identifier for the type Raft.
const Raft_TypeID = 0xbfb4702210603dcb

func (c Raft) Add(ctx context.Context, params func(Raft_add_Params) error) (Raft_add_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      0,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "add",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_add_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_add_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Remove(ctx context.Context, params func(Raft_remove_Params) error) (Raft_remove_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      1,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "remove",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_remove_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_remove_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Send(ctx context.Context, params func(Raft_send_Params) error) (Raft_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      2,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_send_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Put(ctx context.Context, params func(Raft_put_Params) error) (Raft_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      3,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_put_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Items(ctx context.Context, params func(Raft_items_Params) error) (Raft_items_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      4,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "items",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_items_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_items_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Members(ctx context.Context, params func(Raft_members_Params) error) (Raft_members_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      5,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "members",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_members_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_members_Results_Future{Future: ans.Future()}, release

}

func (c Raft) Id(ctx context.Context, params func(Raft_id_Params) error) (Raft_id_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      6,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "id",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Raft_id_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Raft_id_Results_Future{Future: ans.Future()}, release

}

func (c Raft) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Raft) String() string {
	return "Raft(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Raft) AddRef() Raft {
	return Raft(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Raft) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Raft) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Raft) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Raft) DecodeFromPtr(p capnp.Ptr) Raft {
	return Raft(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Raft) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Raft) IsSame(other Raft) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Raft) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Raft) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Raft_Server is a Raft with a local implementation.
type Raft_Server interface {
	Add(context.Context, Raft_add) error

	Remove(context.Context, Raft_remove) error

	Send(context.Context, Raft_send) error

	Put(context.Context, Raft_put) error

	Items(context.Context, Raft_items) error

	Members(context.Context, Raft_members) error

	Id(context.Context, Raft_id) error
}

// Raft_NewServer creates a new Server from an implementation of Raft_Server.
func Raft_NewServer(s Raft_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Raft_Methods(nil, s), s, c)
}

// Raft_ServerToClient creates a new Client from an implementation of Raft_Server.
// The caller is responsible for calling Release on the returned Client.
func Raft_ServerToClient(s Raft_Server) Raft {
	return Raft(capnp.NewClient(Raft_NewServer(s)))
}

// Raft_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Raft_Methods(methods []server.Method, s Raft_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      0,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "add",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Add(ctx, Raft_add{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      1,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "remove",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Remove(ctx, Raft_remove{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      2,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, Raft_send{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      3,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, Raft_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      4,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "items",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Items(ctx, Raft_items{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      5,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "members",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Members(ctx, Raft_members{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfb4702210603dcb,
			MethodID:      6,
			InterfaceName: "raft.capnp:Raft",
			MethodName:    "id",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Id(ctx, Raft_id{call})
		},
	})

	return methods
}

// Raft_add holds the state for a server call to Raft.add.
// See server.Call for documentation.
type Raft_add struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_add) Args() Raft_add_Params {
	return Raft_add_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_add) AllocResults() (Raft_add_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_add_Results(r), err
}

// Raft_remove holds the state for a server call to Raft.remove.
// See server.Call for documentation.
type Raft_remove struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_remove) Args() Raft_remove_Params {
	return Raft_remove_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_remove) AllocResults() (Raft_remove_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_remove_Results(r), err
}

// Raft_send holds the state for a server call to Raft.send.
// See server.Call for documentation.
type Raft_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_send) Args() Raft_send_Params {
	return Raft_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_send) AllocResults() (Raft_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(r), err
}

// Raft_put holds the state for a server call to Raft.put.
// See server.Call for documentation.
type Raft_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_put) Args() Raft_put_Params {
	return Raft_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_put) AllocResults() (Raft_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(r), err
}

// Raft_items holds the state for a server call to Raft.items.
// See server.Call for documentation.
type Raft_items struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_items) Args() Raft_items_Params {
	return Raft_items_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_items) AllocResults() (Raft_items_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_items_Results(r), err
}

// Raft_members holds the state for a server call to Raft.members.
// See server.Call for documentation.
type Raft_members struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_members) Args() Raft_members_Params {
	return Raft_members_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_members) AllocResults() (Raft_members_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(r), err
}

// Raft_id holds the state for a server call to Raft.id.
// See server.Call for documentation.
type Raft_id struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Raft_id) Args() Raft_id_Params {
	return Raft_id_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Raft_id) AllocResults() (Raft_id_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Raft_id_Results(r), err
}

// Raft_List is a list of Raft.
type Raft_List = capnp.CapList[Raft]

// NewRaft creates a new list of Raft.
func NewRaft_List(s *capnp.Segment, sz int32) (Raft_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Raft](l), err
}

type Raft_add_Params capnp.Struct

// Raft_add_Params_TypeID is the unique identifier for the type Raft_add_Params.
const Raft_add_Params_TypeID = 0xc6f8efbe9e7d5983

func NewRaft_add_Params(s *capnp.Segment) (Raft_add_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_add_Params(st), err
}

func NewRootRaft_add_Params(s *capnp.Segment) (Raft_add_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_add_Params(st), err
}

func ReadRootRaft_add_Params(msg *capnp.Message) (Raft_add_Params, error) {
	root, err := msg.Root()
	return Raft_add_Params(root.Struct()), err
}

func (s Raft_add_Params) String() string {
	str, _ := text.Marshal(0xc6f8efbe9e7d5983, capnp.Struct(s))
	return str
}

func (s Raft_add_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_add_Params) DecodeFromPtr(p capnp.Ptr) Raft_add_Params {
	return Raft_add_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_add_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_add_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_add_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_add_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_add_Params) Node() Raft {
	p, _ := capnp.Struct(s).Ptr(0)
	return Raft(p.Interface().Client())
}

func (s Raft_add_Params) HasNode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_add_Params) SetNode(v Raft) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Raft_add_Params_List is a list of Raft_add_Params.
type Raft_add_Params_List = capnp.StructList[Raft_add_Params]

// NewRaft_add_Params creates a new list of Raft_add_Params.
func NewRaft_add_Params_List(s *capnp.Segment, sz int32) (Raft_add_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_add_Params](l), err
}

// Raft_add_Params_Future is a wrapper for a Raft_add_Params promised by a client call.
type Raft_add_Params_Future struct{ *capnp.Future }

func (f Raft_add_Params_Future) Struct() (Raft_add_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_add_Params(p.Struct()), err
}
func (p Raft_add_Params_Future) Node() Raft {
	return Raft(p.Future.Field(0, nil).Client())
}

type Raft_add_Results capnp.Struct

// Raft_add_Results_TypeID is the unique identifier for the type Raft_add_Results.
const Raft_add_Results_TypeID = 0xb009687519b3f38f

func NewRaft_add_Results(s *capnp.Segment) (Raft_add_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_add_Results(st), err
}

func NewRootRaft_add_Results(s *capnp.Segment) (Raft_add_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Raft_add_Results(st), err
}

func ReadRootRaft_add_Results(msg *capnp.Message) (Raft_add_Results, error) {
	root, err := msg.Root()
	return Raft_add_Results(root.Struct()), err
}

func (s Raft_add_Results) String() string {
	str, _ := text.Marshal(0xb009687519b3f38f, capnp.Struct(s))
	return str
}

func (s Raft_add_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_add_Results) DecodeFromPtr(p capnp.Ptr) Raft_add_Results {
	return Raft_add_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_add_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_add_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_add_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_add_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_add_Results) Nodes() (Raft_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Raft_List(p.List()), err
}

func (s Raft_add_Results) HasNodes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_add_Results) SetNodes(v Raft_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewNodes sets the nodes field to a newly
// allocated Raft_List, preferring placement in s's segment.
func (s Raft_add_Results) NewNodes(n int32) (Raft_List, error) {
	l, err := NewRaft_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Raft_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Raft_add_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Raft_add_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Raft_add_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Raft_add_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Raft_add_Results_List is a list of Raft_add_Results.
type Raft_add_Results_List = capnp.StructList[Raft_add_Results]

// NewRaft_add_Results creates a new list of Raft_add_Results.
func NewRaft_add_Results_List(s *capnp.Segment, sz int32) (Raft_add_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Raft_add_Results](l), err
}

// Raft_add_Results_Future is a wrapper for a Raft_add_Results promised by a client call.
type Raft_add_Results_Future struct{ *capnp.Future }

func (f Raft_add_Results_Future) Struct() (Raft_add_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_add_Results(p.Struct()), err
}

type Raft_remove_Params capnp.Struct

// Raft_remove_Params_TypeID is the unique identifier for the type Raft_remove_Params.
const Raft_remove_Params_TypeID = 0xf9ef9a25541688ef

func NewRaft_remove_Params(s *capnp.Segment) (Raft_remove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_remove_Params(st), err
}

func NewRootRaft_remove_Params(s *capnp.Segment) (Raft_remove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_remove_Params(st), err
}

func ReadRootRaft_remove_Params(msg *capnp.Message) (Raft_remove_Params, error) {
	root, err := msg.Root()
	return Raft_remove_Params(root.Struct()), err
}

func (s Raft_remove_Params) String() string {
	str, _ := text.Marshal(0xf9ef9a25541688ef, capnp.Struct(s))
	return str
}

func (s Raft_remove_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_remove_Params) DecodeFromPtr(p capnp.Ptr) Raft_remove_Params {
	return Raft_remove_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_remove_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_remove_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_remove_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_remove_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_remove_Params) Node() Raft {
	p, _ := capnp.Struct(s).Ptr(0)
	return Raft(p.Interface().Client())
}

func (s Raft_remove_Params) HasNode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_remove_Params) SetNode(v Raft) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Raft_remove_Params_List is a list of Raft_remove_Params.
type Raft_remove_Params_List = capnp.StructList[Raft_remove_Params]

// NewRaft_remove_Params creates a new list of Raft_remove_Params.
func NewRaft_remove_Params_List(s *capnp.Segment, sz int32) (Raft_remove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_remove_Params](l), err
}

// Raft_remove_Params_Future is a wrapper for a Raft_remove_Params promised by a client call.
type Raft_remove_Params_Future struct{ *capnp.Future }

func (f Raft_remove_Params_Future) Struct() (Raft_remove_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_remove_Params(p.Struct()), err
}
func (p Raft_remove_Params_Future) Node() Raft {
	return Raft(p.Future.Field(0, nil).Client())
}

type Raft_remove_Results capnp.Struct

// Raft_remove_Results_TypeID is the unique identifier for the type Raft_remove_Results.
const Raft_remove_Results_TypeID = 0xf139b86f408c2bb0

func NewRaft_remove_Results(s *capnp.Segment) (Raft_remove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_remove_Results(st), err
}

func NewRootRaft_remove_Results(s *capnp.Segment) (Raft_remove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_remove_Results(st), err
}

func ReadRootRaft_remove_Results(msg *capnp.Message) (Raft_remove_Results, error) {
	root, err := msg.Root()
	return Raft_remove_Results(root.Struct()), err
}

func (s Raft_remove_Results) String() string {
	str, _ := text.Marshal(0xf139b86f408c2bb0, capnp.Struct(s))
	return str
}

func (s Raft_remove_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_remove_Results) DecodeFromPtr(p capnp.Ptr) Raft_remove_Results {
	return Raft_remove_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_remove_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_remove_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_remove_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_remove_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_remove_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_remove_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_remove_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_remove_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_remove_Results_List is a list of Raft_remove_Results.
type Raft_remove_Results_List = capnp.StructList[Raft_remove_Results]

// NewRaft_remove_Results creates a new list of Raft_remove_Results.
func NewRaft_remove_Results_List(s *capnp.Segment, sz int32) (Raft_remove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_remove_Results](l), err
}

// Raft_remove_Results_Future is a wrapper for a Raft_remove_Results promised by a client call.
type Raft_remove_Results_Future struct{ *capnp.Future }

func (f Raft_remove_Results_Future) Struct() (Raft_remove_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_remove_Results(p.Struct()), err
}

type Raft_send_Params capnp.Struct

// Raft_send_Params_TypeID is the unique identifier for the type Raft_send_Params.
const Raft_send_Params_TypeID = 0xb1f8c610d8dbb7dd

func NewRaft_send_Params(s *capnp.Segment) (Raft_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Params(st), err
}

func NewRootRaft_send_Params(s *capnp.Segment) (Raft_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Params(st), err
}

func ReadRootRaft_send_Params(msg *capnp.Message) (Raft_send_Params, error) {
	root, err := msg.Root()
	return Raft_send_Params(root.Struct()), err
}

func (s Raft_send_Params) String() string {
	str, _ := text.Marshal(0xb1f8c610d8dbb7dd, capnp.Struct(s))
	return str
}

func (s Raft_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_send_Params) DecodeFromPtr(p capnp.Ptr) Raft_send_Params {
	return Raft_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_send_Params) Msg() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Raft_send_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_send_Params) SetMsg(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Raft_send_Params_List is a list of Raft_send_Params.
type Raft_send_Params_List = capnp.StructList[Raft_send_Params]

// NewRaft_send_Params creates a new list of Raft_send_Params.
func NewRaft_send_Params_List(s *capnp.Segment, sz int32) (Raft_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_send_Params](l), err
}

// Raft_send_Params_Future is a wrapper for a Raft_send_Params promised by a client call.
type Raft_send_Params_Future struct{ *capnp.Future }

func (f Raft_send_Params_Future) Struct() (Raft_send_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_send_Params(p.Struct()), err
}

type Raft_send_Results capnp.Struct

// Raft_send_Results_TypeID is the unique identifier for the type Raft_send_Results.
const Raft_send_Results_TypeID = 0xf26fa267f7ea2066

func NewRaft_send_Results(s *capnp.Segment) (Raft_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(st), err
}

func NewRootRaft_send_Results(s *capnp.Segment) (Raft_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_send_Results(st), err
}

func ReadRootRaft_send_Results(msg *capnp.Message) (Raft_send_Results, error) {
	root, err := msg.Root()
	return Raft_send_Results(root.Struct()), err
}

func (s Raft_send_Results) String() string {
	str, _ := text.Marshal(0xf26fa267f7ea2066, capnp.Struct(s))
	return str
}

func (s Raft_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_send_Results) DecodeFromPtr(p capnp.Ptr) Raft_send_Results {
	return Raft_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_send_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_send_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_send_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_send_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_send_Results_List is a list of Raft_send_Results.
type Raft_send_Results_List = capnp.StructList[Raft_send_Results]

// NewRaft_send_Results creates a new list of Raft_send_Results.
func NewRaft_send_Results_List(s *capnp.Segment, sz int32) (Raft_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_send_Results](l), err
}

// Raft_send_Results_Future is a wrapper for a Raft_send_Results promised by a client call.
type Raft_send_Results_Future struct{ *capnp.Future }

func (f Raft_send_Results_Future) Struct() (Raft_send_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_send_Results(p.Struct()), err
}

type Raft_put_Params capnp.Struct

// Raft_put_Params_TypeID is the unique identifier for the type Raft_put_Params.
const Raft_put_Params_TypeID = 0xd063789821634bd8

func NewRaft_put_Params(s *capnp.Segment) (Raft_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Params(st), err
}

func NewRootRaft_put_Params(s *capnp.Segment) (Raft_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Params(st), err
}

func ReadRootRaft_put_Params(msg *capnp.Message) (Raft_put_Params, error) {
	root, err := msg.Root()
	return Raft_put_Params(root.Struct()), err
}

func (s Raft_put_Params) String() string {
	str, _ := text.Marshal(0xd063789821634bd8, capnp.Struct(s))
	return str
}

func (s Raft_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_put_Params) DecodeFromPtr(p capnp.Ptr) Raft_put_Params {
	return Raft_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_put_Params) Item() (Item, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Item(p.Struct()), err
}

func (s Raft_put_Params) HasItem() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_put_Params) SetItem(v Item) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewItem sets the item field to a newly
// allocated Item struct, preferring placement in s's segment.
func (s Raft_put_Params) NewItem() (Item, error) {
	ss, err := NewItem(capnp.Struct(s).Segment())
	if err != nil {
		return Item{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Raft_put_Params_List is a list of Raft_put_Params.
type Raft_put_Params_List = capnp.StructList[Raft_put_Params]

// NewRaft_put_Params creates a new list of Raft_put_Params.
func NewRaft_put_Params_List(s *capnp.Segment, sz int32) (Raft_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_put_Params](l), err
}

// Raft_put_Params_Future is a wrapper for a Raft_put_Params promised by a client call.
type Raft_put_Params_Future struct{ *capnp.Future }

func (f Raft_put_Params_Future) Struct() (Raft_put_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_put_Params(p.Struct()), err
}
func (p Raft_put_Params_Future) Item() Item_Future {
	return Item_Future{Future: p.Future.Field(0, nil)}
}

type Raft_put_Results capnp.Struct

// Raft_put_Results_TypeID is the unique identifier for the type Raft_put_Results.
const Raft_put_Results_TypeID = 0x9c4beb6b068077a3

func NewRaft_put_Results(s *capnp.Segment) (Raft_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(st), err
}

func NewRootRaft_put_Results(s *capnp.Segment) (Raft_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_put_Results(st), err
}

func ReadRootRaft_put_Results(msg *capnp.Message) (Raft_put_Results, error) {
	root, err := msg.Root()
	return Raft_put_Results(root.Struct()), err
}

func (s Raft_put_Results) String() string {
	str, _ := text.Marshal(0x9c4beb6b068077a3, capnp.Struct(s))
	return str
}

func (s Raft_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_put_Results) DecodeFromPtr(p capnp.Ptr) Raft_put_Results {
	return Raft_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_put_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Raft_put_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_put_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Raft_put_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Raft_put_Results_List is a list of Raft_put_Results.
type Raft_put_Results_List = capnp.StructList[Raft_put_Results]

// NewRaft_put_Results creates a new list of Raft_put_Results.
func NewRaft_put_Results_List(s *capnp.Segment, sz int32) (Raft_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_put_Results](l), err
}

// Raft_put_Results_Future is a wrapper for a Raft_put_Results promised by a client call.
type Raft_put_Results_Future struct{ *capnp.Future }

func (f Raft_put_Results_Future) Struct() (Raft_put_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_put_Results(p.Struct()), err
}

type Raft_items_Params capnp.Struct

// Raft_items_Params_TypeID is the unique identifier for the type Raft_items_Params.
const Raft_items_Params_TypeID = 0xf16297be3b2d1ee4

func NewRaft_items_Params(s *capnp.Segment) (Raft_items_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_items_Params(st), err
}

func NewRootRaft_items_Params(s *capnp.Segment) (Raft_items_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_items_Params(st), err
}

func ReadRootRaft_items_Params(msg *capnp.Message) (Raft_items_Params, error) {
	root, err := msg.Root()
	return Raft_items_Params(root.Struct()), err
}

func (s Raft_items_Params) String() string {
	str, _ := text.Marshal(0xf16297be3b2d1ee4, capnp.Struct(s))
	return str
}

func (s Raft_items_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_items_Params) DecodeFromPtr(p capnp.Ptr) Raft_items_Params {
	return Raft_items_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_items_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_items_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_items_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_items_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_items_Params_List is a list of Raft_items_Params.
type Raft_items_Params_List = capnp.StructList[Raft_items_Params]

// NewRaft_items_Params creates a new list of Raft_items_Params.
func NewRaft_items_Params_List(s *capnp.Segment, sz int32) (Raft_items_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_items_Params](l), err
}

// Raft_items_Params_Future is a wrapper for a Raft_items_Params promised by a client call.
type Raft_items_Params_Future struct{ *capnp.Future }

func (f Raft_items_Params_Future) Struct() (Raft_items_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_items_Params(p.Struct()), err
}

type Raft_items_Results capnp.Struct

// Raft_items_Results_TypeID is the unique identifier for the type Raft_items_Results.
const Raft_items_Results_TypeID = 0xeb05cc390961a49a

func NewRaft_items_Results(s *capnp.Segment) (Raft_items_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_items_Results(st), err
}

func NewRootRaft_items_Results(s *capnp.Segment) (Raft_items_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_items_Results(st), err
}

func ReadRootRaft_items_Results(msg *capnp.Message) (Raft_items_Results, error) {
	root, err := msg.Root()
	return Raft_items_Results(root.Struct()), err
}

func (s Raft_items_Results) String() string {
	str, _ := text.Marshal(0xeb05cc390961a49a, capnp.Struct(s))
	return str
}

func (s Raft_items_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_items_Results) DecodeFromPtr(p capnp.Ptr) Raft_items_Results {
	return Raft_items_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_items_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_items_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_items_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_items_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_items_Results) Objects() (Item_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Item_List(p.List()), err
}

func (s Raft_items_Results) HasObjects() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_items_Results) SetObjects(v Item_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewObjects sets the objects field to a newly
// allocated Item_List, preferring placement in s's segment.
func (s Raft_items_Results) NewObjects(n int32) (Item_List, error) {
	l, err := NewItem_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Item_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Raft_items_Results_List is a list of Raft_items_Results.
type Raft_items_Results_List = capnp.StructList[Raft_items_Results]

// NewRaft_items_Results creates a new list of Raft_items_Results.
func NewRaft_items_Results_List(s *capnp.Segment, sz int32) (Raft_items_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_items_Results](l), err
}

// Raft_items_Results_Future is a wrapper for a Raft_items_Results promised by a client call.
type Raft_items_Results_Future struct{ *capnp.Future }

func (f Raft_items_Results_Future) Struct() (Raft_items_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_items_Results(p.Struct()), err
}

type Raft_members_Params capnp.Struct

// Raft_members_Params_TypeID is the unique identifier for the type Raft_members_Params.
const Raft_members_Params_TypeID = 0xf561891b2176587a

func NewRaft_members_Params(s *capnp.Segment) (Raft_members_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_members_Params(st), err
}

func NewRootRaft_members_Params(s *capnp.Segment) (Raft_members_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_members_Params(st), err
}

func ReadRootRaft_members_Params(msg *capnp.Message) (Raft_members_Params, error) {
	root, err := msg.Root()
	return Raft_members_Params(root.Struct()), err
}

func (s Raft_members_Params) String() string {
	str, _ := text.Marshal(0xf561891b2176587a, capnp.Struct(s))
	return str
}

func (s Raft_members_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_members_Params) DecodeFromPtr(p capnp.Ptr) Raft_members_Params {
	return Raft_members_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_members_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_members_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_members_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_members_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_members_Params_List is a list of Raft_members_Params.
type Raft_members_Params_List = capnp.StructList[Raft_members_Params]

// NewRaft_members_Params creates a new list of Raft_members_Params.
func NewRaft_members_Params_List(s *capnp.Segment, sz int32) (Raft_members_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_members_Params](l), err
}

// Raft_members_Params_Future is a wrapper for a Raft_members_Params promised by a client call.
type Raft_members_Params_Future struct{ *capnp.Future }

func (f Raft_members_Params_Future) Struct() (Raft_members_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_members_Params(p.Struct()), err
}

type Raft_members_Results capnp.Struct

// Raft_members_Results_TypeID is the unique identifier for the type Raft_members_Results.
const Raft_members_Results_TypeID = 0xbd2f697b2c16b9a9

func NewRaft_members_Results(s *capnp.Segment) (Raft_members_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(st), err
}

func NewRootRaft_members_Results(s *capnp.Segment) (Raft_members_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Raft_members_Results(st), err
}

func ReadRootRaft_members_Results(msg *capnp.Message) (Raft_members_Results, error) {
	root, err := msg.Root()
	return Raft_members_Results(root.Struct()), err
}

func (s Raft_members_Results) String() string {
	str, _ := text.Marshal(0xbd2f697b2c16b9a9, capnp.Struct(s))
	return str
}

func (s Raft_members_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_members_Results) DecodeFromPtr(p capnp.Ptr) Raft_members_Results {
	return Raft_members_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_members_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_members_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_members_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_members_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_members_Results) Members() (Raft_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Raft_List(p.List()), err
}

func (s Raft_members_Results) HasMembers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Raft_members_Results) SetMembers(v Raft_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMembers sets the members field to a newly
// allocated Raft_List, preferring placement in s's segment.
func (s Raft_members_Results) NewMembers(n int32) (Raft_List, error) {
	l, err := NewRaft_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Raft_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Raft_members_Results_List is a list of Raft_members_Results.
type Raft_members_Results_List = capnp.StructList[Raft_members_Results]

// NewRaft_members_Results creates a new list of Raft_members_Results.
func NewRaft_members_Results_List(s *capnp.Segment, sz int32) (Raft_members_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Raft_members_Results](l), err
}

// Raft_members_Results_Future is a wrapper for a Raft_members_Results promised by a client call.
type Raft_members_Results_Future struct{ *capnp.Future }

func (f Raft_members_Results_Future) Struct() (Raft_members_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_members_Results(p.Struct()), err
}

type Raft_id_Params capnp.Struct

// Raft_id_Params_TypeID is the unique identifier for the type Raft_id_Params.
const Raft_id_Params_TypeID = 0xa8563660e0af9da4

func NewRaft_id_Params(s *capnp.Segment) (Raft_id_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_id_Params(st), err
}

func NewRootRaft_id_Params(s *capnp.Segment) (Raft_id_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Raft_id_Params(st), err
}

func ReadRootRaft_id_Params(msg *capnp.Message) (Raft_id_Params, error) {
	root, err := msg.Root()
	return Raft_id_Params(root.Struct()), err
}

func (s Raft_id_Params) String() string {
	str, _ := text.Marshal(0xa8563660e0af9da4, capnp.Struct(s))
	return str
}

func (s Raft_id_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_id_Params) DecodeFromPtr(p capnp.Ptr) Raft_id_Params {
	return Raft_id_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_id_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_id_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_id_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_id_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Raft_id_Params_List is a list of Raft_id_Params.
type Raft_id_Params_List = capnp.StructList[Raft_id_Params]

// NewRaft_id_Params creates a new list of Raft_id_Params.
func NewRaft_id_Params_List(s *capnp.Segment, sz int32) (Raft_id_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Raft_id_Params](l), err
}

// Raft_id_Params_Future is a wrapper for a Raft_id_Params promised by a client call.
type Raft_id_Params_Future struct{ *capnp.Future }

func (f Raft_id_Params_Future) Struct() (Raft_id_Params, error) {
	p, err := f.Future.Ptr()
	return Raft_id_Params(p.Struct()), err
}

type Raft_id_Results capnp.Struct

// Raft_id_Results_TypeID is the unique identifier for the type Raft_id_Results.
const Raft_id_Results_TypeID = 0xc07b385c303c1f57

func NewRaft_id_Results(s *capnp.Segment) (Raft_id_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Raft_id_Results(st), err
}

func NewRootRaft_id_Results(s *capnp.Segment) (Raft_id_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Raft_id_Results(st), err
}

func ReadRootRaft_id_Results(msg *capnp.Message) (Raft_id_Results, error) {
	root, err := msg.Root()
	return Raft_id_Results(root.Struct()), err
}

func (s Raft_id_Results) String() string {
	str, _ := text.Marshal(0xc07b385c303c1f57, capnp.Struct(s))
	return str
}

func (s Raft_id_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Raft_id_Results) DecodeFromPtr(p capnp.Ptr) Raft_id_Results {
	return Raft_id_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Raft_id_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Raft_id_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Raft_id_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Raft_id_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Raft_id_Results) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Raft_id_Results) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Raft_id_Results_List is a list of Raft_id_Results.
type Raft_id_Results_List = capnp.StructList[Raft_id_Results]

// NewRaft_id_Results creates a new list of Raft_id_Results.
func NewRaft_id_Results_List(s *capnp.Segment, sz int32) (Raft_id_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Raft_id_Results](l), err
}

// Raft_id_Results_Future is a wrapper for a Raft_id_Results promised by a client call.
type Raft_id_Results_Future struct{ *capnp.Future }

func (f Raft_id_Results_Future) Struct() (Raft_id_Results, error) {
	p, err := f.Future.Ptr()
	return Raft_id_Results(p.Struct()), err
}

type Item capnp.Struct

// Item_TypeID is the unique identifier for the type Item.
const Item_TypeID = 0xae462da6618b7135

func NewItem(s *capnp.Segment) (Item, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Item(st), err
}

func NewRootItem(s *capnp.Segment) (Item, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Item(st), err
}

func ReadRootItem(msg *capnp.Message) (Item, error) {
	root, err := msg.Root()
	return Item(root.Struct()), err
}

func (s Item) String() string {
	str, _ := text.Marshal(0xae462da6618b7135, capnp.Struct(s))
	return str
}

func (s Item) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Item) DecodeFromPtr(p capnp.Ptr) Item {
	return Item(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Item) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Item) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Item) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Item) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Item) Key() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Item) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Item) SetKey(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Item) Value() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Item) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Item) SetValue(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// Item_List is a list of Item.
type Item_List = capnp.StructList[Item]

// NewItem creates a new list of Item.
func NewItem_List(s *capnp.Segment, sz int32) (Item_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Item](l), err
}

// Item_Future is a wrapper for a Item promised by a client call.
type Item_Future struct{ *capnp.Future }

func (f Item_Future) Struct() (Item, error) {
	p, err := f.Future.Ptr()
	return Item(p.Struct()), err
}

const schema_8dcfa60b52844164 = "x\xda\xa4T]h\x1cU\x18\xfd\xce\xbd\xf3\xd3\xd0\xa6" +
	"\xd9\xcb\x94\x82U\\\x1b\xb6`\xab\xabij\xa4\x89\x96" +
	"\x9d\x16\x11J\x11v\x16\xff\x02\x0a\x9ddn\xeb\xdaL" +
	"v\xbb\xb3\x9b\xaa%(\xd5\x80A\xc5'Q\x8a\x15\xd4" +
	"R\xecC\xb5\xa2\xa0}h\xd5\x07\xeb\x83\x8a\xd6\xa7\xa2" +
	"\x08\"\x82\x90>\x84T\x8a\xb5/#\xf7&3;k" +
	"\xb2\x94\xe2\xdb\xee\x9c{\xcfw\xbes\xcf\xf7\x0dT\x98" +
	"kl\xed\xfd\xd3\"\xe6\x95M+~\xff\xd0\x0b\xd6\x81" +
	"K{\xde&\x91\x03\x91\x09\x9b\xc8\x19\xe5\xbf\x13\x9c'" +
	"y\x89\x10\x1f?\xf6\xd1o{\xef}\xf4\x83E\xdcP" +
	"\xf04\xff\x89\x8cx\xe8\xe0+\xfe\x89\xe2\x83\x1f\x92X" +
	"\x8d8\xd8\xf9Re\xf5\x89\x1f^#\x93\xa9\x13>?" +
	"\xe2H\xbe\xf8\xeb\x10!~\xfd\xafOnj=\xd5s" +
	"z\xa9\x88>sV\x17\xf9J\xe3\xbf~\xf6\xcb\xc5\xdc" +
	"\xf9\xab\x1fgE\x14\x0d\x85o5\x94\x88\x93g\xd6\xdf" +
	"y\xb8z\xf7\xd9\x0c\xbe\xcd3\x18\x08\xce#\xfa\xc0\xb7" +
	";\xf6\xe6\xfa\xeb\x9f~Ab5o\x8b!83\xc6" +
	"\x11gV\xa9\xde6c|\x03\xe7\x98i\x13\xc5\x8f\xe5" +
	"\xef\x1fxb\xfb\xe1/\xc9\xcb!ij\xc6\xfc\x99\xe0" +
	"\xcc\x9a\x8a\xed\xc5\xd1\xe9w\xce\xcd_=\x9f\x95sR" +
	"\xe3\xa74~q\xcf\xf8\xc6\xb7\x9e\x19\xff1\x8b\x7f\xaf" +
	"\xf1\x0b\x1a?z\xdc\xef\x19\xfe\xce\xbc\x94\xc5\x17\xcc\xcb" +
	"\x04\xe7\x8a\xc6O\xdf\xf1\xaa[\xfb|x!\x8bo\xb2" +
	"\xae\x11\x9c\xcd\x96\xc2\xff\xb8\xb5x\xdf\xb97\xc7\x162" +
	"\x9e\xef\xb6\xe6\xc8\x88\xf7\xdd6\xf7\xf7\xfe\xf7j\x97;" +
	"|\xb2\xe6\x94O\xfa\xe2s\x8fOm\xbcy\xd6\xbf\x92" +
	"\xb9\xe8Y\xd7\xc8\x88\xe7_^\xff\xf0\xa6\xa3\xf3\xffd" +
	"/\x0eYJ\xd1\xb0U\xa2b\xdc\xf0\xf75\xef\x1a\xf7" +
	"\xebl\xb2>RQ\xbf\xeb\xadf\xa1\"\xa3\x96=\xd1" +
	"\x8c<\x83\x1bD\x06\x88D\xef \x91\xb7\x8a\xc3[\xc7" +
	"\x90\x97\x8dF\xad\x815\xc4\xb0\x86\xb0\x9c\xa2\x1a\x14\xca" +
	"~\xc3\x0f\x11\xa5\x18&\xeb#\xbb\x9b2\xa42\xe0\xad" +
	"JY7\xf7\x13y\x05\x0eo\x80A\x00\xeb\xd4\xa3\x88" +
	"\xa2*u;\x87w\x0f\x83}@>\x8b^b\xe8%" +
	"\xe4\xa7\xfc\x89\x96L\xfe-/\xeb\x07A[y\xa6\xc6" +
	"\xe0R\x0d7Sc\x87\xfa\xb8\x9d\xc3{\x80!?Y" +
	"\x0bd\x84\xb5\x842\x07D;R\x04\xf5\xf1z\xddF" +
	"rR\xf7k\xfba\x87a\xfdm\xc3\xec0\xda\xbfL" +
	"7O\x08B\x19\x8e\xc9F\xa4\xb5O4#\xca\x92\xec" +
	"Z\")0<\xbft\xae\xab\xd0\x0e\xb3\x15\xb36\xfb" +
	"\x16n\x12\xa5\xc1F2\x90\xe2B?1\xf1\xb5\x0d\xa4" +
	"\x11A\x92Nqf\x84\x988e\x83\xa5\xf3\x89$\x80" +
	"\xe2\xdd-\xc4\xc4\x1b6x:\x0cH6\x89\x98U\x9c" +
	"\xd36\x8c4\xc8H&B\x1c\x1c$&\xa4\x0d3\xcd" +
	"*\x92\xe1\x16\xa3\xbb\x88\x89\x87lX\xe9\xd2A2\xa9" +
	"b\xe7\x06bb\xc8\xb6\xfd pQj\xc8\xb06%" +
	"]\xf4)\xd7]\xd8\xf5V\xd3E\xbe\xda\x94a\xe4\xa6" +
	"\x0e\xb9\xe0\xd5\xc0E\x19+gS\xfb\xcc;\xd3\xbd\xa1" +
	"\xfdX\xbc\x1a\xa0\x87\x18z\xbaeLe\x9bw\xbe\xf5" +
	"\x96\xf6\xf5>\x95\xa6\xff<\x8eX\x89J\x0d\xdau\xa8" +
	"T_\xc8\xb5\x17.\x01\xb9\x15\x07N\xf5_\xa8\xc8\xbc" +
	"\x0eP\xb7\xfc\xd4\xc6\x9e\x96\xe3\xcd4?\x9d\xbckW" +
	"\xe2]t\xbbP)\xc9e\xc47\xb2\x0e\xb4\xba\xb2\xdf" +
	"\xd7\xf0\xc3\xa8\xcb\xfcTd\xd4\xf7?J$#T\xd2" +
	"{'\xea\xdaI9\xaf\xf1\x1b{\xba\x7f\x03\x00\x00\xff" +
	"\xff01\xdd "

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8dcfa60b52844164,
		Nodes: []uint64{
			0x9c4beb6b068077a3,
			0xa8563660e0af9da4,
			0xae462da6618b7135,
			0xb009687519b3f38f,
			0xb1f8c610d8dbb7dd,
			0xbd2f697b2c16b9a9,
			0xbfb4702210603dcb,
			0xc07b385c303c1f57,
			0xc6f8efbe9e7d5983,
			0xd063789821634bd8,
			0xeb05cc390961a49a,
			0xf139b86f408c2bb0,
			0xf16297be3b2d1ee4,
			0xf26fa267f7ea2066,
			0xf561891b2176587a,
			0xf9ef9a25541688ef,
		},
		Compressed: true,
	})
}
